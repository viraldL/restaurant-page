/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function t(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var r,n,i,s,a,o,u,l,c,f,h,p,d,_,g,m={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},v={duration:.5,overwrite:!1,delay:0},y=1e8,b=1e-8,x=2*Math.PI,w=x/4,T=0,M=Math.sqrt,k=Math.cos,O=Math.sin,S=function(t){return"string"==typeof t},P=function(t){return"function"==typeof t},E=function(t){return"number"==typeof t},C=function(t){return void 0===t},A=function(t){return"object"==typeof t},z=function(t){return!1!==t},D=function(){return"undefined"!=typeof window},R=function(t){return P(t)||S(t)},L="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},F=Array.isArray,I=/(?:-?\.?\d|\.)+/gi,B=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,Y=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,X=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,N=/[+-]=-?[.\d]+/,q=/[^,'"\[\]\s]+/gi,U=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,H={},W={},V=function(t){return(W=xt(t,H))&&br},j=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},$=function(t,e){return!e&&console.warn(t)},G=function(t,e){return t&&(H[t]=e)&&W&&(W[t]=e)||H},Q=function(){return 0},Z={suppressEvents:!0,isStart:!0,kill:!1},K={suppressEvents:!0,kill:!1},J={suppressEvents:!0},tt={},et=[],rt={},nt={},it={},st=30,at=[],ot="",ut=function(t){var e,r,n=t[0];if(A(n)||P(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(r=at.length;r--&&!at[r].targetTest(n););e=at[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Le(t[r],e)))||t.splice(r,1);return t},lt=function(t){return t._gsap||ut(Jt(t))[0]._gsap},ct=function(t,e,r){return(r=t[e])&&P(r)?t[e]():C(r)&&t.getAttribute&&t.getAttribute(e)||r},ft=function(t,e){return(t=t.split(",")).forEach(e)||t},ht=function(t){return Math.round(1e5*t)/1e5||0},pt=function(t){return Math.round(1e7*t)/1e7||0},dt=function(t,e){var r=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+n:"-"===r?t-n:"*"===r?t*n:t/n},_t=function(t,e){for(var r=e.length,n=0;t.indexOf(e[n])<0&&++n<r;);return n<r},gt=function(){var t,e,r=et.length,n=et.slice(0);for(rt={},et.length=0,t=0;t<r;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},mt=function(t,e,r,i){et.length&&!n&&gt(),t.render(e,r,i||n&&e<0&&(t._initted||t._startAt)),et.length&&!n&&gt()},vt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(q).length<2?e:S(t)?t.trim():t},yt=function(t){return t},bt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},xt=function(t,e){for(var r in e)t[r]=e[r];return t},wt=function t(e,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=A(r[n])?t(e[n]||(e[n]={}),r[n]):r[n]);return e},Tt=function(t,e){var r,n={};for(r in t)r in e||(n[r]=t[r]);return n},Mt=function(t){var e,r=t.parent||s,n=t.keyframes?(e=F(t.keyframes),function(t,r){for(var n in r)n in t||"duration"===n&&e||"ease"===n||(t[n]=r[n])}):bt;if(z(t.inherit))for(;r;)n(t,r.vars.defaults),r=r.parent||r._dp;return t},kt=function(t,e,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s,a=t[n];if(i)for(s=e[i];a&&a[i]>s;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[n]=e,e._prev=a,e.parent=e._dp=t,e},Ot=function(t,e,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=e._prev,s=e._next;i?i._next=s:t[r]===e&&(t[r]=s),s?s._prev=i:t[n]===e&&(t[n]=i),e._next=e._prev=e.parent=null},St=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Pt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Et=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Ct=function(t,e,r,i){return t._startAt&&(n?t._startAt.revert(K):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,i))},At=function t(e){return!e||e._ts&&t(e.parent)},zt=function(t){return t._repeat?Dt(t._tTime,t=t.duration()+t._rDelay)*t:0},Dt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},Rt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Lt=function(t){return t._end=pt(t._start+(t._tDur/Math.abs(t._ts||t._rts||b)||0))},Ft=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=pt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Lt(t),r._dirty||Pt(r,t)),t},It=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Rt(t.rawTime(),e),(!e._dur||Gt(0,e.totalDuration(),r)-e._tTime>b)&&e.render(r,!0)),Pt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Bt=function(t,e,r,n){return e.parent&&St(e),e._start=pt((E(r)?r:r||t!==s?Vt(t,r,e):t._time)+e._delay),e._end=pt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),kt(t,e,"_first","_last",t._sort?"_start":0),qt(e)||(t._recent=e),n||It(t,e),t._ts<0&&Ft(t,t._tTime),t},Yt=function(t,e){return(H.ScrollTrigger||j("scrollTrigger",e))&&H.ScrollTrigger.create(e,t)},Xt=function(t,e,r,i,s){return Ue(t,e,s),t._initted?!r&&t._pt&&!n&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&c!==we.frame?(et.push(t),t._lazy=[s,i],1):void 0:1},Nt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},qt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Ut=function(t,e,r,n){var i=t._repeat,s=pt(e)||0,a=t._tTime/t._tDur;return a&&!n&&(t._time*=s/t._dur),t._dur=s,t._tDur=i?i<0?1e10:pt(s*(i+1)+t._rDelay*i):s,a>0&&!n&&Ft(t,t._tTime=t._tDur*a),t.parent&&Lt(t),r||Pt(t.parent,t),t},Ht=function(t){return t instanceof Ie?Pt(t):Ut(t,t._dur)},Wt={_start:0,endTime:Q,totalDuration:Q},Vt=function t(e,r,n){var i,s,a,o=e.labels,u=e._recent||Wt,l=e.duration()>=y?u.endTime(!1):e._dur;return S(r)&&(isNaN(r)||r in o)?(s=r.charAt(0),a="%"===r.substr(-1),i=r.indexOf("="),"<"===s||">"===s?(i>=0&&(r=r.replace(/=/,"")),("<"===s?u._start:u.endTime(u._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(i<0?u:n).totalDuration()/100:1)):i<0?(r in o||(o[r]=l),o[r]):(s=parseFloat(r.charAt(i-1)+r.substr(i+1)),a&&n&&(s=s/100*(F(n)?n[0]:n).totalDuration()),i>1?t(e,r.substr(0,i-1),n)+s:l+s)):null==r?l:+r},jt=function(t,e,r){var n,i,s=E(e[1]),a=(s?2:1)+(t<2?0:1),o=e[a];if(s&&(o.duration=e[1]),o.parent=r,t){for(n=o,i=r;i&&!("immediateRender"in n);)n=i.vars.defaults||{},i=z(i.vars.inherit)&&i.parent;o.immediateRender=z(n.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new $e(e[0],o,e[a+1])},$t=function(t,e){return t||0===t?e(t):e},Gt=function(t,e,r){return r<t?t:r>e?e:r},Qt=function(t,e){return S(t)&&(e=U.exec(t))?e[1]:""},Zt=[].slice,Kt=function(t,e){return t&&A(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&A(t[0]))&&!t.nodeType&&t!==a},Jt=function(t,e,r){return i&&!e&&i.selector?i.selector(t):!S(t)||r||!o&&Te()?F(t)?function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var n;return S(t)&&!e||Kt(t,1)?(n=r).push.apply(n,Jt(t)):r.push(t)}))||r}(t,r):Kt(t)?Zt.call(t,0):t?[t]:[]:Zt.call((e||u).querySelectorAll(t),0)},te=function(t){return t=Jt(t)[0]||$("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return Jt(e,r.querySelectorAll?r:r===t?$("Invalid scope")||u.createElement("div"):t)}},ee=function(t){return t.sort((function(){return.5-Math.random()}))},re=function(t){if(P(t))return t;var e=A(t)?t:{each:t},r=Ce(e.ease),n=e.from||0,i=parseFloat(e.base)||0,s={},a=n>0&&n<1,o=isNaN(n)||a,u=e.axis,l=n,c=n;return S(n)?l=c={center:.5,edges:.5,end:1}[n]||0:!a&&o&&(l=n[0],c=n[1]),function(t,a,f){var h,p,d,_,g,m,v,b,x,w=(f||e).length,T=s[w];if(!T){if(!(x="auto"===e.grid?0:(e.grid||[1,y])[1])){for(v=-y;v<(v=f[x++].getBoundingClientRect().left)&&x<w;);x--}for(T=s[w]=[],h=o?Math.min(x,w)*l-.5:n%x,p=x===y?0:o?w*c/x-.5:n/x|0,v=0,b=y,m=0;m<w;m++)d=m%x-h,_=p-(m/x|0),T[m]=g=u?Math.abs("y"===u?_:d):M(d*d+_*_),g>v&&(v=g),g<b&&(b=g);"random"===n&&ee(T),T.max=v-b,T.min=b,T.v=w=(parseFloat(e.amount)||parseFloat(e.each)*(x>w?w-1:u?"y"===u?w/x:x:Math.max(x,w/x))||0)*("edges"===n?-1:1),T.b=w<0?i-w:i,T.u=Qt(e.amount||e.each)||0,r=r&&w<0?Pe(r):r}return w=(T[t]-T.min)/T.max||0,pt(T.b+(r?r(w):w)*T.v)+T.u}},ne=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var n=pt(Math.round(parseFloat(r)/t)*t*e);return(n-n%1)/e+(E(r)?0:Qt(r))}},ie=function(t,e){var r,n,i=F(t);return!i&&A(t)&&(r=i=t.radius||y,t.values?(t=Jt(t.values),(n=!E(t[0]))&&(r*=r)):t=ne(t.increment)),$t(e,i?P(t)?function(e){return n=t(e),Math.abs(n-e)<=r?n:e}:function(e){for(var i,s,a=parseFloat(n?e.x:e),o=parseFloat(n?e.y:0),u=y,l=0,c=t.length;c--;)(i=n?(i=t[c].x-a)*i+(s=t[c].y-o)*s:Math.abs(t[c]-a))<u&&(u=i,l=c);return l=!r||u<=r?t[l]:e,n||l===e||E(e)?l:l+Qt(e)}:ne(t))},se=function(t,e,r,n){return $t(F(t)?!e:!0===r?!!(r=0):!n,(function(){return F(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*n)/n}))},ae=function(t,e,r){return $t(r,(function(r){return t[~~e(r)]}))},oe=function(t){for(var e,r,n,i,s=0,a="";~(e=t.indexOf("random(",s));)n=t.indexOf(")",e),i="["===t.charAt(e+7),r=t.substr(e+7,n-e-7).match(i?q:I),a+=t.substr(s,e-s)+se(i?r:+r[0],i?0:+r[1],+r[2]||1e-5),s=n+1;return a+t.substr(s,t.length-s)},ue=function(t,e,r,n,i){var s=e-t,a=n-r;return $t(i,(function(e){return r+((e-t)/s*a||0)}))},le=function(t,e,r){var n,i,s,a=t.labels,o=y;for(n in a)(i=a[n]-e)<0==!!r&&i&&o>(i=Math.abs(i))&&(s=n,o=i);return s},ce=function(t,e,r){var n,s,a,o=t.vars,u=o[e],l=i,c=t._ctx;if(u)return n=o[e+"Params"],s=o.callbackScope||t,r&&et.length&&gt(),c&&(i=c),a=n?u.apply(s,n):u.call(s),i=l,a},fe=function(t){return St(t),t.scrollTrigger&&t.scrollTrigger.kill(!!n),t.progress()<1&&ce(t,"onInterrupt"),t},he=function(t){var e=(t=!t.name&&t.default||t).name,r=P(t),n=e&&!r&&t.init?function(){this._props=[]}:t,i={init:Q,render:nr,add:Ne,kill:sr,modifier:ir,rawVars:0},s={targetTest:0,get:0,getSetter:Je,aliases:{},register:0};if(Te(),t!==n){if(nt[e])return;bt(n,bt(Tt(t,i),s)),xt(n.prototype,xt(i,Tt(t,s))),nt[n.prop=e]=n,t.targetTest&&(at.push(n),tt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}G(e,n),t.register&&t.register(br,n,ur)},pe=255,de={aqua:[0,pe,pe],lime:[0,pe,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,pe],navy:[0,0,128],white:[pe,pe,pe],olive:[128,128,0],yellow:[pe,pe,0],orange:[pe,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[pe,0,0],pink:[pe,192,203],cyan:[0,pe,pe],transparent:[pe,pe,pe,0]},_e=function(t,e,r){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*pe+.5|0},ge=function(t,e,r){var n,i,s,a,o,u,l,c,f,h,p=t?E(t)?[t>>16,t>>8&pe,t&pe]:0:de.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),de[t])p=de[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),i=t.charAt(2),s=t.charAt(3),t="#"+n+n+i+i+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&pe,p&pe,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&pe,t&pe]}else if("hsl"===t.substr(0,3))if(p=h=t.match(I),e){if(~t.indexOf("="))return p=t.match(B),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,n=2*(u=+p[2]/100)-(i=u<=.5?u*(o+1):u+o-u*o),p.length>3&&(p[3]*=1),p[0]=_e(a+1/3,n,i),p[1]=_e(a,n,i),p[2]=_e(a-1/3,n,i);else p=t.match(I)||de.transparent;p=p.map(Number)}return e&&!h&&(n=p[0]/pe,i=p[1]/pe,s=p[2]/pe,u=((l=Math.max(n,i,s))+(c=Math.min(n,i,s)))/2,l===c?a=o=0:(f=l-c,o=u>.5?f/(2-l-c):f/(l+c),a=l===n?(i-s)/f+(i<s?6:0):l===i?(s-n)/f+2:(n-i)/f+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},me=function(t){var e=[],r=[],n=-1;return t.split(ye).forEach((function(t){var i=t.match(Y)||[];e.push.apply(e,i),r.push(n+=i.length+1)})),e.c=r,e},ve=function(t,e,r){var n,i,s,a,o="",u=(t+o).match(ye),l=e?"hsla(":"rgba(",c=0;if(!u)return t;if(u=u.map((function(t){return(t=ge(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(s=me(t),(n=r.c).join(o)!==s.c.join(o)))for(a=(i=t.replace(ye,"1").split(Y)).length-1;c<a;c++)o+=i[c]+(~n.indexOf(c)?u.shift()||l+"0,0,0,0)":(s.length?s:u.length?u:r).shift());if(!i)for(a=(i=t.split(ye)).length-1;c<a;c++)o+=i[c]+u[c];return o+i[a]},ye=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in de)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),be=/hsl[a]?\(/,xe=function(t){var e,r=t.join(" ");if(ye.lastIndex=0,ye.test(r))return e=be.test(r),t[1]=ve(t[1],e),t[0]=ve(t[0],e,me(t[1])),!0},we=function(){var t,e,r,n,i,s,c=Date.now,f=500,p=33,d=c(),_=d,g=1e3/240,m=g,v=[],y=function r(a){var o,u,l,h,y=c()-_,b=!0===a;if(y>f&&(d+=y-p),((o=(l=(_+=y)-d)-m)>0||b)&&(h=++n.frame,i=l-1e3*n.time,n.time=l/=1e3,m+=o+(o>=g?4:g-o),u=1),b||(t=e(r)),u)for(s=0;s<v.length;s++)v[s](l,i,h,a)};return n={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){l&&(!o&&D()&&(a=o=window,u=a.document||{},H.gsap=br,(a.gsapVersions||(a.gsapVersions=[])).push(br.version),V(W||a.GreenSockGlobals||!a.gsap&&a||{}),r=a.requestAnimationFrame),t&&n.sleep(),e=r||function(t){return setTimeout(t,m-1e3*n.time+1|0)},h=1,y(2))},sleep:function(){(r?a.cancelAnimationFrame:clearTimeout)(t),h=0,e=Q},lagSmoothing:function(t,e){f=t||1/0,p=Math.min(e||33,f)},fps:function(t){g=1e3/(t||240),m=1e3*n.time+g},add:function(t,e,r){var i=e?function(e,r,s,a){t(e,r,s,a),n.remove(i)}:t;return n.remove(t),v[r?"unshift":"push"](i),Te(),i},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&s>=e&&s--},_listeners:v}}(),Te=function(){return!h&&we.wake()},Me={},ke=/^[\d.\-M][\d.\-,\s]/,Oe=/["']/g,Se=function(t){for(var e,r,n,i={},s=t.substr(1,t.length-3).split(":"),a=s[0],o=1,u=s.length;o<u;o++)r=s[o],e=o!==u-1?r.lastIndexOf(","):r.length,n=r.substr(0,e),i[a]=isNaN(n)?n.replace(Oe,"").trim():+n,a=r.substr(e+1).trim();return i},Pe=function(t){return function(e){return 1-t(1-e)}},Ee=function t(e,r){for(var n,i=e._first;i;)i instanceof Ie?t(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?t(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},Ce=function(t,e){return t&&(P(t)?t:Me[t]||function(t){var e,r,n,i,s=(t+"").split("("),a=Me[s[0]];return a&&s.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Se(s[1])]:(e=t,r=e.indexOf("(")+1,n=e.indexOf(")"),i=e.indexOf("(",r),e.substring(r,~i&&i<n?e.indexOf(")",n+1):n)).split(",").map(vt)):Me._CE&&ke.test(t)?Me._CE("",t):a}(t))||e},Ae=function(t,e,r,n){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,s={easeIn:e,easeOut:r,easeInOut:n};return ft(t,(function(t){for(var e in Me[t]=H[t]=s,Me[i=t.toLowerCase()]=r,s)Me[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Me[t+"."+e]=s[e]})),s},ze=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},De=function t(e,r,n){var i=r>=1?r:1,s=(n||(e?.3:.45))/(r<1?r:1),a=s/x*(Math.asin(1/i)||0),o=function(t){return 1===t?1:i*Math.pow(2,-10*t)*O((t-a)*s)+1},u="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:ze(o);return s=x/s,u.config=function(r,n){return t(e,r,n)},u},Re=function t(e,r){void 0===r&&(r=1.70158);var n=function(t){return t?--t*t*((r+1)*t+r)+1:0},i="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:ze(n);return i.config=function(r){return t(e,r)},i};ft("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Ae(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),Me.Linear.easeNone=Me.none=Me.Linear.easeIn,Ae("Elastic",De("in"),De("out"),De()),p=7.5625,_=1/(d=2.75),Ae("Bounce",(function(t){return 1-g(1-t)}),g=function(t){return t<_?p*t*t:t<.7272727272727273?p*Math.pow(t-1.5/d,2)+.75:t<.9090909090909092?p*(t-=2.25/d)*t+.9375:p*Math.pow(t-2.625/d,2)+.984375}),Ae("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Ae("Circ",(function(t){return-(M(1-t*t)-1)})),Ae("Sine",(function(t){return 1===t?1:1-k(t*w)})),Ae("Back",Re("in"),Re("out"),Re()),Me.SteppedEase=Me.steps=H.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,n=t+(e?0:1),i=e?1:0;return function(t){return((n*Gt(0,.99999999,t)|0)+i)*r}}},v.ease=Me["quad.out"],ft("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ot+=t+","+t+"Params,"}));var Le=function(t,e){this.id=T++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:ct,this.set=e?e.getSetter:Je},Fe=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Ut(this,+t.duration,1,1),this.data=t.data,i&&(this._ctx=i,i.data.push(this)),h||we.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Ut(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Te(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ft(this,t),!r._dp||r.parent||It(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Bt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===b||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),mt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+zt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+zt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Dt(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Rt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Gt(-this._delay,this._tDur,e),!0),Lt(this),Et(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Te(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==b&&(this._tTime-=b)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Bt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(z(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Rt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=J);var e=n;return n=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),n=e,this},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return!this.parent&&this._sat?this._sat.vars.immediateRender?-1:this._sat.globalTime(t):r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Ht(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Ht(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Vt(this,t),z(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,z(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-b))},e.eventCallback=function(t,e,r){var n=this.vars;return arguments.length>1?(e?(n[t]=e,r&&(n[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(r){var n=P(t)?t:yt,i=function(){var t=e.then;e.then=null,P(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),r(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){fe(this)},t}();bt(Fe.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Ie=function(r){function i(e,n){var i;return void 0===e&&(e={}),(i=r.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=z(e.sortChildren),s&&Bt(e.parent||s,t(i),n),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Yt(t(i),e.scrollTrigger),i}e(i,r);var a=i.prototype;return a.to=function(t,e,r){return jt(0,arguments,this),this},a.from=function(t,e,r){return jt(1,arguments,this),this},a.fromTo=function(t,e,r,n){return jt(2,arguments,this),this},a.set=function(t,e,r){return e.duration=0,e.parent=this,Mt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new $e(t,e,Vt(this,r),1),this},a.call=function(t,e,r){return Bt(this,$e.delayedCall(0,t,e),r)},a.staggerTo=function(t,e,r,n,i,s,a){return r.duration=e,r.stagger=r.stagger||n,r.onComplete=s,r.onCompleteParams=a,r.parent=this,new $e(t,r,Vt(this,i)),this},a.staggerFrom=function(t,e,r,n,i,s,a){return r.runBackwards=1,Mt(r).immediateRender=z(r.immediateRender),this.staggerTo(t,e,r,n,i,s,a)},a.staggerFromTo=function(t,e,r,n,i,s,a,o){return n.startAt=r,Mt(n).immediateRender=z(n.immediateRender),this.staggerTo(t,e,n,i,s,a,o)},a.render=function(t,e,r){var i,a,o,u,l,c,f,h,p,d,_,g,m=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,x=t<=0?0:pt(t),w=this._zTime<0!=t<0&&(this._initted||!y);if(this!==s&&x>v&&t>=0&&(x=v),x!==this._tTime||r||w){if(m!==this._time&&y&&(x+=this._time-m,t+=this._time-m),i=x,p=this._start,c=!(h=this._ts),w&&(y||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(_=this._yoyo,l=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,r);if(i=pt(x%l),x===v?(u=this._repeat,i=y):((u=~~(x/l))&&u===x/l&&(i=y,u--),i>y&&(i=y)),d=Dt(this._tTime,l),!m&&this._tTime&&d!==u&&(d=u),_&&1&u&&(i=y-i,g=1),u!==d&&!this._lock){var T=_&&1&d,M=T===(_&&1&u);if(u<d&&(T=!T),m=T?0:y,this._lock=1,this.render(m||(g?0:pt(u*l)),e,!y)._lock=0,this._tTime=x,!e&&this.parent&&ce(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),m&&m!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,M&&(this._lock=2,m=T?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;Ee(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(f=function(t,e,r){var n;if(r>e)for(n=t._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,pt(m),pt(i)),f&&(x-=i-(i=f._start))),this._tTime=x,this._time=i,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&i&&!e&&(ce(this,"onStart"),this._tTime!==x))return this;if(i>=m&&t>=0)for(a=this._first;a;){if(o=a._next,(a._act||i>=a._start)&&a._ts&&f!==a){if(a.parent!==this)return this.render(t,e,r);if(a.render(a._ts>0?(i-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(i-a._start)*a._ts,e,r),i!==this._time||!this._ts&&!c){f=0,o&&(x+=this._zTime=-1e-8);break}}a=o}else{a=this._last;for(var k=t<0?t:i;a;){if(o=a._prev,(a._act||k<=a._end)&&a._ts&&f!==a){if(a.parent!==this)return this.render(t,e,r);if(a.render(a._ts>0?(k-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(k-a._start)*a._ts,e,r||n&&(a._initted||a._startAt)),i!==this._time||!this._ts&&!c){f=0,o&&(x+=this._zTime=k?-1e-8:b);break}}a=o}}if(f&&!e&&(this.pause(),f.render(i>=m?0:-1e-8)._zTime=i>=m?1:-1,this._ts))return this._start=p,Lt(this),this.render(t,e,r);this._onUpdate&&!e&&ce(this,"onUpdate",!0),(x===v&&this._tTime>=this.totalDuration()||!x&&m)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!y)&&(x===v&&this._ts>0||!x&&this._ts<0)&&St(this,1),e||t<0&&!m||!x&&!m&&v||(ce(this,x===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(x<v&&this.timeScale()>0)&&this._prom())))}return this},a.add=function(t,e){var r=this;if(E(e)||(e=Vt(this,e,t)),!(t instanceof Fe)){if(F(t))return t.forEach((function(t){return r.add(t,e)})),this;if(S(t))return this.addLabel(t,e);if(!P(t))return this;t=$e.delayedCall(0,t)}return this!==t?Bt(this,t,e):this},a.getChildren=function(t,e,r,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===n&&(n=-y);for(var i=[],s=this._first;s;)s._start>=n&&(s instanceof $e?e&&i.push(s):(r&&i.push(s),t&&i.push.apply(i,s.getChildren(!0,e,r)))),s=s._next;return i},a.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},a.remove=function(t){return S(t)?this.removeLabel(t):P(t)?this.killTweensOf(t):(Ot(this,t),t===this._recent&&(this._recent=this._last),Pt(this))},a.totalTime=function(t,e){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=pt(we.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),r.prototype.totalTime.call(this,t,e),this._forcing=0,this):this._tTime},a.addLabel=function(t,e){return this.labels[t]=Vt(this,e),this},a.removeLabel=function(t){return delete this.labels[t],this},a.addPause=function(t,e,r){var n=$e.delayedCall(0,e||Q,r);return n.data="isPause",this._hasPause=1,Bt(this,n,Vt(this,t))},a.removePause=function(t){var e=this._first;for(t=Vt(this,t);e;)e._start===t&&"isPause"===e.data&&St(e),e=e._next},a.killTweensOf=function(t,e,r){for(var n=this.getTweensOf(t,r),i=n.length;i--;)Be!==n[i]&&n[i].kill(t,e);return this},a.getTweensOf=function(t,e){for(var r,n=[],i=Jt(t),s=this._first,a=E(e);s;)s instanceof $e?_t(s._targets,i)&&(a?(!Be||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&n.push(s):(r=s.getTweensOf(i,e)).length&&n.push.apply(n,r),s=s._next;return n},a.tweenTo=function(t,e){e=e||{};var r,n=this,i=Vt(n,t),s=e,a=s.startAt,o=s.onStart,u=s.onStartParams,l=s.immediateRender,c=$e.to(n,bt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale())||b,onStart:function(){if(n.pause(),!r){var t=e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale());c._dur!==t&&Ut(c,t,0,1).render(c._time,!0,!0),r=1}o&&o.apply(c,u||[])}},e));return l?c.render(0):c},a.tweenFromTo=function(t,e,r){return this.tweenTo(e,bt({startAt:{time:Vt(this,t)}},r))},a.recent=function(){return this._recent},a.nextLabel=function(t){return void 0===t&&(t=this._time),le(this,Vt(this,t))},a.previousLabel=function(t){return void 0===t&&(t=this._time),le(this,Vt(this,t),1)},a.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+b)},a.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var n,i=this._first,s=this.labels;i;)i._start>=r&&(i._start+=t,i._end+=t),i=i._next;if(e)for(n in s)s[n]>=r&&(s[n]+=t);return Pt(this)},a.invalidate=function(t){var e=this._first;for(this._lock=0;e;)e.invalidate(t),e=e._next;return r.prototype.invalidate.call(this,t)},a.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Pt(this)},a.totalDuration=function(t){var e,r,n,i=0,a=this,o=a._last,u=y;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-t:t));if(a._dirty){for(n=a.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>u&&a._sort&&o._ts&&!a._lock?(a._lock=1,Bt(a,o,r-o._delay,1)._lock=0):u=r,r<0&&o._ts&&(i-=r,(!n&&!a._dp||n&&n.smoothChildTiming)&&(a._start+=r/a._ts,a._time-=r,a._tTime-=r),a.shiftChildren(-r,!1,-Infinity),u=0),o._end>i&&o._ts&&(i=o._end),o=e;Ut(a,a===s&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},i.updateRoot=function(t){if(s._ts&&(mt(s,Rt(t,s)),c=we.frame),we.frame>=st){st+=m.autoSleep||120;var e=s._first;if((!e||!e._ts)&&m.autoSleep&&we._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||we.sleep()}}},i}(Fe);bt(Ie.prototype,{_lock:0,_hasPause:0,_forcing:0});var Be,Ye,Xe=function(t,e,r,n,i,s,a){var o,u,l,c,f,h,p,d,_=new ur(this._pt,t,e,0,1,rr,null,i),g=0,m=0;for(_.b=r,_.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=oe(n)),s&&(s(d=[r,n],t,e),r=d[0],n=d[1]),u=r.match(X)||[];o=X.exec(n);)c=o[0],f=n.substring(g,o.index),l?l=(l+1)%5:"rgba("===f.substr(-5)&&(l=1),c!==u[m++]&&(h=parseFloat(u[m-1])||0,_._pt={_next:_._pt,p:f||1===m?f:",",s:h,c:"="===c.charAt(1)?dt(h,c)-h:parseFloat(c)-h,m:l&&l<4?Math.round:0},g=X.lastIndex);return _.c=g<n.length?n.substring(g,n.length):"",_.fp=a,(N.test(n)||p)&&(_.e=0),this._pt=_,_},Ne=function(t,e,r,n,i,s,a,o,u,l){P(n)&&(n=n(i||0,t,s));var c,f=t[e],h="get"!==r?r:P(f)?u?t[e.indexOf("set")||!P(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():f,p=P(f)?u?Ze:Qe:Ge;if(S(n)&&(~n.indexOf("random(")&&(n=oe(n)),"="===n.charAt(1)&&((c=dt(h,n)+(Qt(h)||0))||0===c)&&(n=c)),!l||h!==n||Ye)return isNaN(h*n)||""===n?(!f&&!(e in t)&&j(e,n),Xe.call(this,t,e,h,n,p,o||m.stringFilter,u)):(c=new ur(this._pt,t,e,+h||0,n-(h||0),"boolean"==typeof f?er:tr,0,p),u&&(c.fp=u),a&&c.modifier(a,this,t),this._pt=c)},qe=function(t,e,r,n,i,s){var a,o,u,l;if(nt[t]&&!1!==(a=new nt[t]).init(i,a.rawVars?e[t]:function(t,e,r,n,i){if(P(t)&&(t=We(t,i,e,r,n)),!A(t)||t.style&&t.nodeType||F(t)||L(t))return S(t)?We(t,i,e,r,n):t;var s,a={};for(s in t)a[s]=We(t[s],i,e,r,n);return a}(e[t],n,i,s,r),r,n,s)&&(r._pt=o=new ur(r._pt,i,t,0,1,a.render,a,0,a.priority),r!==f))for(u=r._ptLookup[r._targets.indexOf(i)],l=a._props.length;l--;)u[a._props[l]]=o;return a},Ue=function t(e,i,a){var o,u,l,c,f,h,p,d,_,g,m,x,w,T=e.vars,M=T.ease,k=T.startAt,O=T.immediateRender,S=T.lazy,P=T.onUpdate,E=T.onUpdateParams,C=T.callbackScope,A=T.runBackwards,D=T.yoyoEase,R=T.keyframes,L=T.autoRevert,F=e._dur,I=e._startAt,B=e._targets,Y=e.parent,X=Y&&"nested"===Y.data?Y.vars.targets:B,N="auto"===e._overwrite&&!r,q=e.timeline;if(q&&(!R||!M)&&(M="none"),e._ease=Ce(M,v.ease),e._yEase=D?Pe(Ce(!0===D?M:D,v.ease)):0,D&&e._yoyo&&!e._repeat&&(D=e._yEase,e._yEase=e._ease,e._ease=D),e._from=!q&&!!T.runBackwards,!q||R&&!T.stagger){if(x=(d=B[0]?lt(B[0]).harness:0)&&T[d.prop],o=Tt(T,tt),I&&(I._zTime<0&&I.progress(1),i<0&&A&&O&&!L?I.render(-1,!0):I.revert(A&&F?K:Z),I._lazy=0),k){if(St(e._startAt=$e.set(B,bt({data:"isStart",overwrite:!1,parent:Y,immediateRender:!0,lazy:!I&&z(S),startAt:null,delay:0,onUpdate:P,onUpdateParams:E,callbackScope:C,stagger:0},k))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(n||!O&&!L)&&e._startAt.revert(K),O&&F&&i<=0&&a<=0)return void(i&&(e._zTime=i))}else if(A&&F&&!I)if(i&&(O=!1),l=bt({overwrite:!1,data:"isFromStart",lazy:O&&!I&&z(S),immediateRender:O,stagger:0,parent:Y},o),x&&(l[d.prop]=x),St(e._startAt=$e.set(B,l)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(n?e._startAt.revert(K):e._startAt.render(-1,!0)),e._zTime=i,O){if(!i)return}else t(e._startAt,b,b);for(e._pt=e._ptCache=0,S=F&&z(S)||S&&!F,u=0;u<B.length;u++){if(p=(f=B[u])._gsap||ut(B)[u]._gsap,e._ptLookup[u]=g={},rt[p.id]&&et.length&&gt(),m=X===B?u:X.indexOf(f),d&&!1!==(_=new d).init(f,x||o,e,m,X)&&(e._pt=c=new ur(e._pt,f,_.name,0,1,_.render,_,0,_.priority),_._props.forEach((function(t){g[t]=c})),_.priority&&(h=1)),!d||x)for(l in o)nt[l]&&(_=qe(l,o,e,m,f,X))?_.priority&&(h=1):g[l]=c=Ne.call(e,f,l,"get",o[l],m,X,0,T.stringFilter);e._op&&e._op[u]&&e.kill(f,e._op[u]),N&&e._pt&&(Be=e,s.killTweensOf(f,g,e.globalTime(i)),w=!e.parent,Be=0),e._pt&&S&&(rt[p.id]=1)}h&&or(e),e._onInit&&e._onInit(e)}e._onUpdate=P,e._initted=(!e._op||e._pt)&&!w,R&&i<=0&&q.render(y,!0,!0)},He=function(t,e,r,n){var i,s,a=e.ease||n||"power1.inOut";if(F(e))s=r[t]||(r[t]=[]),e.forEach((function(t,r){return s.push({t:r/(e.length-1)*100,v:t,e:a})}));else for(i in e)s=r[i]||(r[i]=[]),"ease"===i||s.push({t:parseFloat(t),v:e[i],e:a})},We=function(t,e,r,n,i){return P(t)?t.call(e,r,n,i):S(t)&&~t.indexOf("random(")?oe(t):t},Ve=ot+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",je={};ft(Ve+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return je[t]=1}));var $e=function(i){function a(e,n,a,o){var u;"number"==typeof n&&(a.duration=n,n=a,a=null);var l,c,f,h,p,d,_,g,v=(u=i.call(this,o?n:Mt(n))||this).vars,y=v.duration,b=v.delay,x=v.immediateRender,w=v.stagger,T=v.overwrite,M=v.keyframes,k=v.defaults,O=v.scrollTrigger,S=v.yoyoEase,P=n.parent||s,C=(F(e)||L(e)?E(e[0]):"length"in n)?[e]:Jt(e);if(u._targets=C.length?ut(C):$("GSAP target "+e+" not found. https://greensock.com",!m.nullTargetWarn)||[],u._ptLookup=[],u._overwrite=T,M||w||R(y)||R(b)){if(n=u.vars,(l=u.timeline=new Ie({data:"nested",defaults:k||{},targets:P&&"nested"===P.data?P.vars.targets:C})).kill(),l.parent=l._dp=t(u),l._start=0,w||R(y)||R(b)){if(h=C.length,_=w&&re(w),A(w))for(p in w)~Ve.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(c=0;c<h;c++)(f=Tt(n,je)).stagger=0,S&&(f.yoyoEase=S),g&&xt(f,g),d=C[c],f.duration=+We(y,t(u),c,d,C),f.delay=(+We(b,t(u),c,d,C)||0)-u._delay,!w&&1===h&&f.delay&&(u._delay=b=f.delay,u._start+=b,f.delay=0),l.to(d,f,_?_(c,d,C):0),l._ease=Me.none;l.duration()?y=b=0:u.timeline=0}else if(M){Mt(bt(l.vars.defaults,{ease:"none"})),l._ease=Ce(M.ease||n.ease||"none");var D,I,B,Y=0;if(F(M))M.forEach((function(t){return l.to(C,t,">")})),l.duration();else{for(p in f={},M)"ease"===p||"easeEach"===p||He(p,M[p],f,M.easeEach);for(p in f)for(D=f[p].sort((function(t,e){return t.t-e.t})),Y=0,c=0;c<D.length;c++)(B={ease:(I=D[c]).e,duration:(I.t-(c?D[c-1].t:0))/100*y})[p]=I.v,l.to(C,B,Y),Y+=B.duration;l.duration()<y&&l.to({},{duration:y-l.duration()})}}y||u.duration(y=l.duration())}else u.timeline=0;return!0!==T||r||(Be=t(u),s.killTweensOf(C),Be=0),Bt(P,t(u),a),n.reversed&&u.reverse(),n.paused&&u.paused(!0),(x||!y&&!M&&u._start===pt(P._time)&&z(x)&&At(t(u))&&"nested"!==P.data)&&(u._tTime=-1e-8,u.render(Math.max(0,-b)||0)),O&&Yt(t(u),O),u}e(a,i);var o=a.prototype;return o.render=function(t,e,r){var i,s,a,o,u,l,c,f,h,p=this._time,d=this._tDur,_=this._dur,g=t<0,m=t>d-b&&!g?d:t<b?0:t;if(_){if(m!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(i=m,f=this.timeline,this._repeat){if(o=_+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*o+t,e,r);if(i=pt(m%o),m===d?(a=this._repeat,i=_):((a=~~(m/o))&&a===m/o&&(i=_,a--),i>_&&(i=_)),(l=this._yoyo&&1&a)&&(h=this._yEase,i=_-i),u=Dt(this._tTime,o),i===p&&!r&&this._initted)return this._tTime=m,this;a!==u&&(f&&this._yEase&&Ee(f,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(pt(o*a),!0).invalidate()._lock=0))}if(!this._initted){if(Xt(this,g?t:i,r,e,m))return this._tTime=0,this;if(p!==this._time)return this;if(_!==this._dur)return this.render(t,e,r)}if(this._tTime=m,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(h||this._ease)(i/_),this._from&&(this.ratio=c=1-c),i&&!p&&!e&&(ce(this,"onStart"),this._tTime!==m))return this;for(s=this._pt;s;)s.r(c,s.d),s=s._next;f&&f.render(t<0?t:!i&&l?-1e-8:f._dur*f._ease(i/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(g&&Ct(this,t,0,r),ce(this,"onUpdate")),this._repeat&&a!==u&&this.vars.onRepeat&&!e&&this.parent&&ce(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(g&&!this._onUpdate&&Ct(this,t,0,!0),(t||!_)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&St(this,1),e||g&&!p||!(m||p||l)||(ce(this,m===d?"onComplete":"onReverseComplete",!0),this._prom&&!(m<d&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,i){var s,a,o,u=t.ratio,l=e<0||!e&&(!t._start&&Nt(t)&&(t._initted||!qt(t))||(t._ts<0||t._dp._ts<0)&&!qt(t))?0:1,c=t._rDelay,f=0;if(c&&t._repeat&&(f=Gt(0,t._tDur,e),a=Dt(f,c),t._yoyo&&1&a&&(l=1-l),a!==Dt(t._tTime,c)&&(u=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==u||n||i||t._zTime===b||!e&&t._zTime){if(!t._initted&&Xt(t,e,i,r,f))return;for(o=t._zTime,t._zTime=e||(r?b:0),r||(r=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=f,s=t._pt;s;)s.r(l,s.d),s=s._next;e<0&&Ct(t,e,0,!0),t._onUpdate&&!r&&ce(t,"onUpdate"),f&&t._repeat&&!r&&t.parent&&ce(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&St(t,1),r||n||(ce(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},o.targets=function(){return this._targets},o.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),i.prototype.invalidate.call(this,t)},o.resetTo=function(t,e,r,n){h||we.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ue(this,i),function(t,e,r,n,i,s,a){var o,u,l,c,f=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!f)for(f=t._ptCache[e]=[],l=t._ptLookup,c=t._targets.length;c--;){if((o=l[c][e])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==e&&o.fp!==e;)o=o._next;if(!o)return Ye=1,t.vars[e]="+=0",Ue(t,a),Ye=0,1;f.push(o)}for(c=f.length;c--;)(o=(u=f[c])._pt||u).s=!n&&0!==n||i?o.s+(n||0)+s*o.c:n,o.c=r-o.s,u.e&&(u.e=ht(r)+Qt(u.e)),u.b&&(u.b=o.s+Qt(u.b))}(this,t,e,r,n,this._ease(i/this._dur),i)?this.resetTo(t,e,r,n):(Ft(this,0),this.parent||kt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},o.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?fe(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Be&&!0!==Be.vars.overwrite)._first||fe(this),this.parent&&r!==this.timeline.totalDuration()&&Ut(this,this._dur*this.timeline._tDur/r,0,1),this}var n,i,s,a,o,u,l,c=this._targets,f=t?Jt(t):c,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,n=r===e.length;n&&r--&&t[r]===e[r];);return r<0}(c,f))return"all"===e&&(this._pt=0),fe(this);for(n=this._op=this._op||[],"all"!==e&&(S(e)&&(o={},ft(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var r,n,i,s,a=t[0]?lt(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(n in r=xt({},e),o)if(n in r)for(i=(s=o[n].split(",")).length;i--;)r[s[i]]=r[n];return r}(c,e)),l=c.length;l--;)if(~f.indexOf(c[l]))for(o in i=h[l],"all"===e?(n[l]=e,a=i,s={}):(s=n[l]=n[l]||{},a=e),a)(u=i&&i[o])&&("kill"in u.d&&!0!==u.d.kill(o)||Ot(this,u,"_pt"),delete i[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&p&&fe(this),this},a.to=function(t,e){return new a(t,e,arguments[2])},a.from=function(t,e){return jt(1,arguments)},a.delayedCall=function(t,e,r,n){return new a(e,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:e,onReverseComplete:e,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:n})},a.fromTo=function(t,e,r){return jt(2,arguments)},a.set=function(t,e){return e.duration=0,e.repeatDelay||(e.repeat=0),new a(t,e)},a.killTweensOf=function(t,e,r){return s.killTweensOf(t,e,r)},a}(Fe);bt($e.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ft("staggerTo,staggerFrom,staggerFromTo",(function(t){$e[t]=function(){var e=new Ie,r=Zt.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var Ge=function(t,e,r){return t[e]=r},Qe=function(t,e,r){return t[e](r)},Ze=function(t,e,r,n){return t[e](n.fp,r)},Ke=function(t,e,r){return t.setAttribute(e,r)},Je=function(t,e){return P(t[e])?Qe:C(t[e])&&t.setAttribute?Ke:Ge},tr=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},er=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},rr=function(t,e){var r=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+n,r=r._next;n+=e.c}e.set(e.t,e.p,n,e)},nr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},ir=function(t,e,r,n){for(var i,s=this._pt;s;)i=s._next,s.p===n&&s.modifier(t,e,r),s=i},sr=function(t){for(var e,r,n=this._pt;n;)r=n._next,n.p===t&&!n.op||n.op===t?Ot(this,n,"_pt"):n.dep||(e=1),n=r;return!e},ar=function(t,e,r,n){n.mSet(t,e,n.m.call(n.tween,r,n.mt),n)},or=function(t){for(var e,r,n,i,s=t._pt;s;){for(e=s._next,r=n;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:i)?s._prev._next=s:n=s,(s._next=r)?r._prev=s:i=s,s=e}t._pt=n},ur=function(){function t(t,e,r,n,i,s,a,o,u){this.t=e,this.s=n,this.c=i,this.p=r,this.r=s||tr,this.d=a||this,this.set=o||Ge,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=ar,this.m=t,this.mt=r,this.tween=e},t}();ft(ot+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return tt[t]=1})),H.TweenMax=H.TweenLite=$e,H.TimelineLite=H.TimelineMax=Ie,s=new Ie({sortChildren:!1,defaults:v,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),m.stringFilter=xe;var lr=[],cr={},fr=[],hr=0,pr=function(t){return(cr[t]||fr).map((function(t){return t()}))},dr=function(){var t=Date.now(),e=[];t-hr>2&&(pr("matchMediaInit"),lr.forEach((function(t){var r,n,i,s,o=t.queries,u=t.conditions;for(n in o)(r=a.matchMedia(o[n]).matches)&&(i=1),r!==u[n]&&(u[n]=r,s=1);s&&(t.revert(),i&&e.push(t))})),pr("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t)})),hr=t,pr("matchMedia"))},_r=function(){function t(t,e){this.selector=e&&te(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,r){P(t)&&(r=e,e=t,t=P);var n=this,s=function(){var t,s=i,a=n.selector;return s&&s!==n&&s.data.push(n),r&&(n.selector=te(r)),i=n,t=e.apply(n,arguments),P(t)&&n._r.push(t),i=s,n.selector=a,n.isReverted=!1,t};return n.last=s,t===P?s(n):t?n[t]=s:s},e.ignore=function(t){var e=i;i=null,t(this),i=e},e.getTweens=function(){var e=[];return this.data.forEach((function(r){return r instanceof t?e.push.apply(e,r.getTweens()):r instanceof $e&&!(r.parent&&"nested"===r.parent.data)&&e.push(r)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var r=this;if(t){var n=this.getTweens();this.data.forEach((function(t){"isFlip"===t.data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})))})),n.map((function(t){return{g:t.globalTime(0),t}})).sort((function(t,e){return e.g-t.g||-1})).forEach((function(e){return e.t.revert(t)})),this.data.forEach((function(e){return!(e instanceof Fe)&&e.revert&&e.revert(t)})),this._r.forEach((function(e){return e(t,r)})),this.isReverted=!0}else this.data.forEach((function(t){return t.kill&&t.kill()}));if(this.clear(),e){var i=lr.indexOf(this);~i&&lr.splice(i,1)}},e.revert=function(t){this.kill(t||{})},t}(),gr=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,r){A(t)||(t={matches:t});var n,i,s,o=new _r(0,r||this.scope),u=o.conditions={};for(i in this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===i?s=1:(n=a.matchMedia(t[i]))&&(lr.indexOf(o)<0&&lr.push(o),(u[i]=n.matches)&&(s=1),n.addListener?n.addListener(dr):n.addEventListener("change",dr));return s&&e(o),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),mr={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return he(t)}))},timeline:function(t){return new Ie(t)},getTweensOf:function(t,e){return s.getTweensOf(t,e)},getProperty:function(t,e,r,n){S(t)&&(t=Jt(t)[0]);var i=lt(t||{}).get,s=r?yt:vt;return"native"===r&&(r=""),t?e?s((nt[e]&&nt[e].get||i)(t,e,r,n)):function(e,r,n){return s((nt[e]&&nt[e].get||i)(t,e,r,n))}:t},quickSetter:function(t,e,r){if((t=Jt(t)).length>1){var n=t.map((function(t){return br.quickSetter(t,e,r)})),i=n.length;return function(t){for(var e=i;e--;)n[e](t)}}t=t[0]||{};var s=nt[e],a=lt(t),o=a.harness&&(a.harness.aliases||{})[e]||e,u=s?function(e){var n=new s;f._pt=0,n.init(t,r?e+r:e,f,0,[t]),n.render(1,n),f._pt&&nr(1,f)}:a.set(t,o);return s?u:function(e){return u(t,o,r?e+r:e,a,1)}},quickTo:function(t,e,r){var n,i=br.to(t,xt(((n={})[e]="+=0.1",n.paused=!0,n),r||{})),s=function(t,r,n){return i.resetTo(e,t,r,n)};return s.tween=i,s},isTweening:function(t){return s.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ce(t.ease,v.ease)),wt(v,t||{})},config:function(t){return wt(m,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,n=t.plugins,i=t.defaults,s=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!nt[t]&&!H[t]&&$(e+" effect requires "+t+" plugin.")})),it[e]=function(t,e,n){return r(Jt(t),bt(e||{},i),n)},s&&(Ie.prototype[e]=function(t,r,n){return this.add(it[e](t,A(r)?r:(n=r)&&{},this),n)})},registerEase:function(t,e){Me[t]=Ce(e)},parseEase:function(t,e){return arguments.length?Ce(t,e):Me},getById:function(t){return s.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,n,i=new Ie(t);for(i.smoothChildTiming=z(t.smoothChildTiming),s.remove(i),i._dp=0,i._time=i._tTime=s._time,r=s._first;r;)n=r._next,!e&&!r._dur&&r instanceof $e&&r.vars.onComplete===r._targets[0]||Bt(i,r,r._start-r._delay),r=n;return Bt(s,i,0),i},context:function(t,e){return t?new _r(t,e):i},matchMedia:function(t){return new gr(t)},matchMediaRefresh:function(){return lr.forEach((function(t){var e,r,n=t.conditions;for(r in n)n[r]&&(n[r]=!1,e=1);e&&t.revert()}))||dr()},addEventListener:function(t,e){var r=cr[t]||(cr[t]=[]);~r.indexOf(e)||r.push(e)},removeEventListener:function(t,e){var r=cr[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},utils:{wrap:function t(e,r,n){var i=r-e;return F(e)?ae(e,t(0,e.length),r):$t(n,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,r,n){var i=r-e,s=2*i;return F(e)?ae(e,t(0,e.length-1),r):$t(n,(function(t){return e+((t=(s+(t-e)%s)%s||0)>i?s-t:t)}))},distribute:re,random:se,snap:ie,normalize:function(t,e,r){return ue(t,e,0,1,r)},getUnit:Qt,clamp:function(t,e,r){return $t(r,(function(r){return Gt(t,e,r)}))},splitColor:ge,toArray:Jt,selector:te,mapRange:ue,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||Qt(r))}},interpolate:function t(e,r,n,i){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var a,o,u,l,c,f=S(e),h={};if(!0===n&&(i=1)&&(n=null),f)e={p:e},r={p:r};else if(F(e)&&!F(r)){for(u=[],l=e.length,c=l-2,o=1;o<l;o++)u.push(t(e[o-1],e[o]));l--,s=function(t){t*=l;var e=Math.min(c,~~t);return u[e](t-e)},n=r}else i||(e=xt(F(e)?[]:{},e));if(!u){for(a in r)Ne.call(h,e,a,"get",r[a]);s=function(t){return nr(t,h)||(f?e.p:e)}}}return $t(n,s)},shuffle:ee},install:V,effects:it,ticker:we,updateRoot:Ie.updateRoot,plugins:nt,globalTimeline:s,core:{PropTween:ur,globals:G,Tween:$e,Timeline:Ie,Animation:Fe,getCache:lt,_removeLinkedListItem:Ot,reverting:function(){return n},context:function(t){return t&&i&&(i.data.push(t),t._ctx=i),i},suppressOverwrites:function(t){return r=t}}};ft("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return mr[t]=$e[t]})),we.add(Ie.updateRoot),f=mr.to({},{duration:0});var vr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},yr=function(t,e){return{name:t,rawVars:1,init:function(t,r,n){n._onInit=function(t){var n,i;if(S(r)&&(n={},ft(r,(function(t){return n[t]=1})),r=n),e){for(i in n={},r)n[i]=e(r[i]);r=n}!function(t,e){var r,n,i,s=t._targets;for(r in e)for(n=s.length;n--;)(i=t._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=vr(i,r)),i&&i.modifier&&i.modifier(e[r],t,s[n],r))}(t,r)}}}},br=mr.registerPlugin({name:"attr",init:function(t,e,r,n,i){var s,a,o;for(s in this.tween=r,e)o=t.getAttribute(s)||"",(a=this.add(t,"setAttribute",(o||0)+"",e[s],n,i,0,0,s)).op=s,a.b=o,this._props.push(s)},render:function(t,e){for(var r=e._pt;r;)n?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r],0,0,0,0,0,1)}},yr("roundProps",ne),yr("modifiers"),yr("snap",ie))||mr;$e.version=Ie.version=br.version="3.11.4",l=1,D()&&Te(),Me.Power0,Me.Power1,Me.Power2,Me.Power3,Me.Power4,Me.Linear,Me.Quad,Me.Cubic,Me.Quart,Me.Quint,Me.Strong,Me.Elastic,Me.Back,Me.SteppedEase,Me.Bounce,Me.Sine,Me.Expo,Me.Circ;var xr,wr,Tr,Mr,kr,Or,Sr,Pr,Er={},Cr=180/Math.PI,Ar=Math.PI/180,zr=Math.atan2,Dr=/([A-Z])/g,Rr=/(left|right|width|margin|padding|x)/i,Lr=/[\s,\(]\S/,Fr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Ir=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Br=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Yr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Xr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Nr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},qr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Ur=function(t,e,r){return t.style[e]=r},Hr=function(t,e,r){return t.style.setProperty(e,r)},Wr=function(t,e,r){return t._gsap[e]=r},Vr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},jr=function(t,e,r,n,i){var s=t._gsap;s.scaleX=s.scaleY=r,s.renderTransform(i,s)},$r=function(t,e,r,n,i){var s=t._gsap;s[e]=r,s.renderTransform(i,s)},Gr="transform",Qr=Gr+"Origin",Zr=function(t,e){var r=this,n=this.target,i=n.style;if(t in Er){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=Fr[t]||t).indexOf(",")?t.split(",").forEach((function(t){return r.tfm[t]=gn(n,t)})):this.tfm[t]=n._gsap.x?n._gsap[t]:gn(n,t)),this.props.indexOf(Gr)>=0)return;n._gsap.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(Qr,e,"")),t=Gr}(i||e)&&this.props.push(t,e,i[t])},Kr=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},Jr=function(){var t,e,r=this.props,n=this.target,i=n.style,s=n._gsap;for(t=0;t<r.length;t+=3)r[t+1]?n[r[t]]=r[t+2]:r[t+2]?i[r[t]]=r[t+2]:i.removeProperty(r[t].replace(Dr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)s[e]=this.tfm[e];s.svg&&(s.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),!(t=Sr())||t.isStart||i[Gr]||(Kr(i),s.uncache=1)}},tn=function(t,e){var r={target:t,props:[],revert:Jr,save:Zr};return e&&e.split(",").forEach((function(t){return r.save(t)})),r},en=function(t,e){var r=wr.createElementNS?wr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):wr.createElement(t);return r.style?r:wr.createElement(t)},rn=function t(e,r,n){var i=getComputedStyle(e);return i[r]||i.getPropertyValue(r.replace(Dr,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&t(e,sn(r)||r,1)||""},nn="O,Moz,ms,Ms,Webkit".split(","),sn=function(t,e,r){var n=(e||kr).style,i=5;if(t in n&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(nn[i]+t in n););return i<0?null:(3===i?"ms":i>=0?nn[i]:"")+t},an=function(){"undefined"!=typeof window&&window.document&&(xr=window,wr=xr.document,Tr=wr.documentElement,kr=en("div")||{style:{}},en("div"),Gr=sn(Gr),Qr=Gr+"Origin",kr.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Pr=!!sn("perspective"),Sr=br.core.reverting,Mr=1)},on=function t(e){var r,n=en("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,s=this.nextSibling,a=this.style.cssText;if(Tr.appendChild(n),n.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(s?i.insertBefore(this,s):i.appendChild(this)),Tr.removeChild(n),this.style.cssText=a,r},un=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},ln=function(t){var e;try{e=t.getBBox()}catch(r){e=on.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===on||(e=on.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+un(t,["x","cx","x1"])||0,y:+un(t,["y","cy","y1"])||0,width:0,height:0}},cn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!ln(t))},fn=function(t,e){if(e){var r=t.style;e in Er&&e!==Qr&&(e=Gr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(Dr,"-$1").toLowerCase())):r.removeAttribute(e)}},hn=function(t,e,r,n,i,s){var a=new ur(t._pt,e,r,0,1,s?qr:Nr);return t._pt=a,a.b=n,a.e=i,t._props.push(r),a},pn={deg:1,rad:1,turn:1},dn={grid:1,flex:1},_n=function t(e,r,n,i){var s,a,o,u,l=parseFloat(n)||0,c=(n+"").trim().substr((l+"").length)||"px",f=kr.style,h=Rr.test(r),p="svg"===e.tagName.toLowerCase(),d=(p?"client":"offset")+(h?"Width":"Height"),_=100,g="px"===i,m="%"===i;return i===c||!l||pn[i]||pn[c]?l:("px"!==c&&!g&&(l=t(e,r,n,"px")),u=e.getCTM&&cn(e),!m&&"%"!==c||!Er[r]&&!~r.indexOf("adius")?(f[h?"width":"height"]=_+(g?c:i),a=~r.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==wr&&a.appendChild||(a=wr.body),(o=a._gsap)&&m&&o.width&&h&&o.time===we.time&&!o.uncache?ht(l/o.width*_):((m||"%"===c)&&!dn[rn(a,"display")]&&(f.position=rn(e,"position")),a===e&&(f.position="static"),a.appendChild(kr),s=kr[d],a.removeChild(kr),f.position="absolute",h&&m&&((o=lt(a)).time=we.time,o.width=a[d]),ht(g?s*l/_:s&&l?_/s*l:0))):(s=u?e.getBBox()[h?"width":"height"]:e[d],ht(m?l/s*_:l/100*s)))},gn=function(t,e,r,n){var i;return Mr||an(),e in Fr&&"transform"!==e&&~(e=Fr[e]).indexOf(",")&&(e=e.split(",")[0]),Er[e]&&"transform"!==e?(i=Sn(t,n),i="transformOrigin"!==e?i[e]:i.svg?i.origin:Pn(rn(t,Qr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=bn[e]&&bn[e](t,e,r)||rn(t,e)||ct(t,e)||("opacity"===e?1:0)),r&&!~(i+"").trim().indexOf(" ")?_n(t,e,i,r)+r:i},mn=function(t,e,r,n){if(!r||"none"===r){var i=sn(e,t,1),s=i&&rn(t,i,1);s&&s!==r?(e=i,r=s):"borderColor"===e&&(r=rn(t,"borderTopColor"))}var a,o,u,l,c,f,h,p,d,_,g,v=new ur(this._pt,t.style,e,0,1,rr),y=0,b=0;if(v.b=r,v.e=n,r+="","auto"==(n+="")&&(t.style[e]=n,n=rn(t,e)||n,t.style[e]=r),xe(a=[r,n]),n=a[1],u=(r=a[0]).match(Y)||[],(n.match(Y)||[]).length){for(;o=Y.exec(n);)h=o[0],d=n.substring(y,o.index),c?c=(c+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(c=1),h!==(f=u[b++]||"")&&(l=parseFloat(f)||0,g=f.substr((l+"").length),"="===h.charAt(1)&&(h=dt(l,h)+g),p=parseFloat(h),_=h.substr((p+"").length),y=Y.lastIndex-_.length,_||(_=_||m.units[e]||g,y===n.length&&(n+=_,v.e+=_)),g!==_&&(l=_n(t,e,f,_)||0),v._pt={_next:v._pt,p:d||1===b?d:",",s:l,c:p-l,m:c&&c<4||"zIndex"===e?Math.round:0});v.c=y<n.length?n.substring(y,n.length):""}else v.r="display"===e&&"none"===n?qr:Nr;return N.test(n)&&(v.e=0),this._pt=v,v},vn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},yn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,n,i,s=e.t,a=s.style,o=e.u,u=s._gsap;if("all"===o||!0===o)a.cssText="",n=1;else for(i=(o=o.split(",")).length;--i>-1;)r=o[i],Er[r]&&(n=1,r="transformOrigin"===r?Qr:Gr),fn(s,r);n&&(fn(s,Gr),u&&(u.svg&&s.removeAttribute("transform"),Sn(s,1),u.uncache=1,Kr(a)))}},bn={clearProps:function(t,e,r,n,i){if("isFromStart"!==i.data){var s=t._pt=new ur(t._pt,e,r,0,0,yn);return s.u=n,s.pr=-10,s.tween=i,t._props.push(r),1}}},xn=[1,0,0,1,0,0],wn={},Tn=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},Mn=function(t){var e=rn(t,Gr);return Tn(e)?xn:e.substr(7).match(B).map(ht)},kn=function(t,e){var r,n,i,s,a=t._gsap||lt(t),o=t.style,u=Mn(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?xn:u:(u!==xn||t.offsetParent||t===Tr||a.svg||(i=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(s=1,n=t.nextElementSibling,Tr.appendChild(t)),u=Mn(t),i?o.display=i:fn(t,"display"),s&&(n?r.insertBefore(t,n):r?r.appendChild(t):Tr.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},On=function(t,e,r,n,i,s){var a,o,u,l=t._gsap,c=i||kn(t,!0),f=l.xOrigin||0,h=l.yOrigin||0,p=l.xOffset||0,d=l.yOffset||0,_=c[0],g=c[1],m=c[2],v=c[3],y=c[4],b=c[5],x=e.split(" "),w=parseFloat(x[0])||0,T=parseFloat(x[1])||0;r?c!==xn&&(o=_*v-g*m)&&(u=w*(-g/o)+T*(_/o)-(_*b-g*y)/o,w=w*(v/o)+T*(-m/o)+(m*b-v*y)/o,T=u):(w=(a=ln(t)).x+(~x[0].indexOf("%")?w/100*a.width:w),T=a.y+(~(x[1]||x[0]).indexOf("%")?T/100*a.height:T)),n||!1!==n&&l.smooth?(y=w-f,b=T-h,l.xOffset=p+(y*_+b*m)-y,l.yOffset=d+(y*g+b*v)-b):l.xOffset=l.yOffset=0,l.xOrigin=w,l.yOrigin=T,l.smooth=!!n,l.origin=e,l.originIsAbsolute=!!r,t.style[Qr]="0px 0px",s&&(hn(s,l,"xOrigin",f,w),hn(s,l,"yOrigin",h,T),hn(s,l,"xOffset",p,l.xOffset),hn(s,l,"yOffset",d,l.yOffset)),t.setAttribute("data-svg-origin",w+" "+T)},Sn=function(t,e){var r=t._gsap||new Le(t);if("x"in r&&!e&&!r.uncache)return r;var n,i,s,a,o,u,l,c,f,h,p,d,_,g,v,y,b,x,w,T,M,k,O,S,P,E,C,A,z,D,R,L,F=t.style,I=r.scaleX<0,B="px",Y="deg",X=getComputedStyle(t),N=rn(t,Qr)||"0";return n=i=s=u=l=c=f=h=p=0,a=o=1,r.svg=!(!t.getCTM||!cn(t)),X.translate&&("none"===X.translate&&"none"===X.scale&&"none"===X.rotate||(F[Gr]=("none"!==X.translate?"translate3d("+(X.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==X.rotate?"rotate("+X.rotate+") ":"")+("none"!==X.scale?"scale("+X.scale.split(" ").join(",")+") ":"")+("none"!==X[Gr]?X[Gr]:"")),F.scale=F.rotate=F.translate="none"),g=kn(t,r.svg),r.svg&&(r.uncache?(P=t.getBBox(),N=r.xOrigin-P.x+"px "+(r.yOrigin-P.y)+"px",S=""):S=!e&&t.getAttribute("data-svg-origin"),On(t,S||N,!!S||r.originIsAbsolute,!1!==r.smooth,g)),d=r.xOrigin||0,_=r.yOrigin||0,g!==xn&&(x=g[0],w=g[1],T=g[2],M=g[3],n=k=g[4],i=O=g[5],6===g.length?(a=Math.sqrt(x*x+w*w),o=Math.sqrt(M*M+T*T),u=x||w?zr(w,x)*Cr:0,(f=T||M?zr(T,M)*Cr+u:0)&&(o*=Math.abs(Math.cos(f*Ar))),r.svg&&(n-=d-(d*x+_*T),i-=_-(d*w+_*M))):(L=g[6],D=g[7],C=g[8],A=g[9],z=g[10],R=g[11],n=g[12],i=g[13],s=g[14],l=(v=zr(L,z))*Cr,v&&(S=k*(y=Math.cos(-v))+C*(b=Math.sin(-v)),P=O*y+A*b,E=L*y+z*b,C=k*-b+C*y,A=O*-b+A*y,z=L*-b+z*y,R=D*-b+R*y,k=S,O=P,L=E),c=(v=zr(-T,z))*Cr,v&&(y=Math.cos(-v),R=M*(b=Math.sin(-v))+R*y,x=S=x*y-C*b,w=P=w*y-A*b,T=E=T*y-z*b),u=(v=zr(w,x))*Cr,v&&(S=x*(y=Math.cos(v))+w*(b=Math.sin(v)),P=k*y+O*b,w=w*y-x*b,O=O*y-k*b,x=S,k=P),l&&Math.abs(l)+Math.abs(u)>359.9&&(l=u=0,c=180-c),a=ht(Math.sqrt(x*x+w*w+T*T)),o=ht(Math.sqrt(O*O+L*L)),v=zr(k,O),f=Math.abs(v)>2e-4?v*Cr:0,p=R?1/(R<0?-R:R):0),r.svg&&(S=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!Tn(rn(t,Gr)),S&&t.setAttribute("transform",S))),Math.abs(f)>90&&Math.abs(f)<270&&(I?(a*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,f+=f<=0?180:-180)),e=e||r.uncache,r.x=n-((r.xPercent=n&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+B,r.y=i-((r.yPercent=i&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+B,r.z=s+B,r.scaleX=ht(a),r.scaleY=ht(o),r.rotation=ht(u)+Y,r.rotationX=ht(l)+Y,r.rotationY=ht(c)+Y,r.skewX=f+Y,r.skewY=h+Y,r.transformPerspective=p+B,(r.zOrigin=parseFloat(N.split(" ")[2])||0)&&(F[Qr]=Pn(N)),r.xOffset=r.yOffset=0,r.force3D=m.force3D,r.renderTransform=r.svg?Ln:Pr?Rn:Cn,r.uncache=0,r},Pn=function(t){return(t=t.split(" "))[0]+" "+t[1]},En=function(t,e,r){var n=Qt(e);return ht(parseFloat(e)+parseFloat(_n(t,"x",r+"px",n)))+n},Cn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Rn(t,e)},An="0deg",zn="0px",Dn=") ",Rn=function(t,e){var r=e||this,n=r.xPercent,i=r.yPercent,s=r.x,a=r.y,o=r.z,u=r.rotation,l=r.rotationY,c=r.rotationX,f=r.skewX,h=r.skewY,p=r.scaleX,d=r.scaleY,_=r.transformPerspective,g=r.force3D,m=r.target,v=r.zOrigin,y="",b="auto"===g&&t&&1!==t||!0===g;if(v&&(c!==An||l!==An)){var x,w=parseFloat(l)*Ar,T=Math.sin(w),M=Math.cos(w);w=parseFloat(c)*Ar,x=Math.cos(w),s=En(m,s,T*x*-v),a=En(m,a,-Math.sin(w)*-v),o=En(m,o,M*x*-v+v)}_!==zn&&(y+="perspective("+_+Dn),(n||i)&&(y+="translate("+n+"%, "+i+"%) "),(b||s!==zn||a!==zn||o!==zn)&&(y+=o!==zn||b?"translate3d("+s+", "+a+", "+o+") ":"translate("+s+", "+a+Dn),u!==An&&(y+="rotate("+u+Dn),l!==An&&(y+="rotateY("+l+Dn),c!==An&&(y+="rotateX("+c+Dn),f===An&&h===An||(y+="skew("+f+", "+h+Dn),1===p&&1===d||(y+="scale("+p+", "+d+Dn),m.style[Gr]=y||"translate(0, 0)"},Ln=function(t,e){var r,n,i,s,a,o=e||this,u=o.xPercent,l=o.yPercent,c=o.x,f=o.y,h=o.rotation,p=o.skewX,d=o.skewY,_=o.scaleX,g=o.scaleY,m=o.target,v=o.xOrigin,y=o.yOrigin,b=o.xOffset,x=o.yOffset,w=o.forceCSS,T=parseFloat(c),M=parseFloat(f);h=parseFloat(h),p=parseFloat(p),(d=parseFloat(d))&&(p+=d=parseFloat(d),h+=d),h||p?(h*=Ar,p*=Ar,r=Math.cos(h)*_,n=Math.sin(h)*_,i=Math.sin(h-p)*-g,s=Math.cos(h-p)*g,p&&(d*=Ar,a=Math.tan(p-d),i*=a=Math.sqrt(1+a*a),s*=a,d&&(a=Math.tan(d),r*=a=Math.sqrt(1+a*a),n*=a)),r=ht(r),n=ht(n),i=ht(i),s=ht(s)):(r=_,s=g,n=i=0),(T&&!~(c+"").indexOf("px")||M&&!~(f+"").indexOf("px"))&&(T=_n(m,"x",c,"px"),M=_n(m,"y",f,"px")),(v||y||b||x)&&(T=ht(T+v-(v*r+y*i)+b),M=ht(M+y-(v*n+y*s)+x)),(u||l)&&(a=m.getBBox(),T=ht(T+u/100*a.width),M=ht(M+l/100*a.height)),a="matrix("+r+","+n+","+i+","+s+","+T+","+M+")",m.setAttribute("transform",a),w&&(m.style[Gr]=a)},Fn=function(t,e,r,n,i){var s,a,o=360,u=S(i),l=parseFloat(i)*(u&&~i.indexOf("rad")?Cr:1)-n,c=n+l+"deg";return u&&("short"===(s=i.split("_")[1])&&(l%=o)!=l%180&&(l+=l<0?o:-360),"cw"===s&&l<0?l=(l+36e9)%o-~~(l/o)*o:"ccw"===s&&l>0&&(l=(l-36e9)%o-~~(l/o)*o)),t._pt=a=new ur(t._pt,e,r,n,l,Br),a.e=c,a.u="deg",t._props.push(r),a},In=function(t,e){for(var r in e)t[r]=e[r];return t},Bn=function(t,e,r){var n,i,s,a,o,u,l,c=In({},r._gsap),f=r.style;for(i in c.svg?(s=r.getAttribute("transform"),r.setAttribute("transform",""),f[Gr]=e,n=Sn(r,1),fn(r,Gr),r.setAttribute("transform",s)):(s=getComputedStyle(r)[Gr],f[Gr]=e,n=Sn(r,1),f[Gr]=s),Er)(s=c[i])!==(a=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=Qt(s)!==(l=Qt(a))?_n(r,i,s,l):parseFloat(s),u=parseFloat(a),t._pt=new ur(t._pt,n,i,o,u-o,Ir),t._pt.u=l||0,t._props.push(i));In(n,c)};ft("padding,margin,Width,Radius",(function(t,e){var r="Top",n="Right",i="Bottom",s="Left",a=(e<3?[r,n,i,s]:[r+s,r+n,i+n,i+s]).map((function(r){return e<2?t+r:"border"+r+t}));bn[e>1?"border"+t:t]=function(t,e,r,n,i){var s,o;if(arguments.length<4)return s=a.map((function(e){return gn(t,e,r)})),5===(o=s.join(" ")).split(s[0]).length?s[0]:o;s=(n+"").split(" "),o={},a.forEach((function(t,e){return o[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,o,i)}}));var Yn,Xn,Nn={name:"css",register:an,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,n,i){var s,a,o,u,l,c,f,h,p,d,_,g,v,y,b,x,w,T,M,k,O=this._props,P=t.style,E=r.vars.startAt;for(f in Mr||an(),this.styles=this.styles||tn(t),x=this.styles.props,this.tween=r,e)if("autoRound"!==f&&(a=e[f],!nt[f]||!qe(f,e,r,n,t,i)))if(l=typeof a,c=bn[f],"function"===l&&(l=typeof(a=a.call(r,n,t,i))),"string"===l&&~a.indexOf("random(")&&(a=oe(a)),c)c(this,t,f,a,r)&&(b=1);else if("--"===f.substr(0,2))s=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",ye.lastIndex=0,ye.test(s)||(h=Qt(s),p=Qt(a)),p?h!==p&&(s=_n(t,f,s,p)+p):h&&(a+=h),this.add(P,"setProperty",s,a,n,i,0,0,f),O.push(f),x.push(f,0,P[f]);else if("undefined"!==l){if(E&&f in E?(s="function"==typeof E[f]?E[f].call(r,n,t,i):E[f],S(s)&&~s.indexOf("random(")&&(s=oe(s)),Qt(s+"")||(s+=m.units[f]||Qt(gn(t,f))||""),"="===(s+"").charAt(1)&&(s=gn(t,f))):s=gn(t,f),u=parseFloat(s),(d="string"===l&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),o=parseFloat(a),f in Fr&&("autoAlpha"===f&&(1===u&&"hidden"===gn(t,"visibility")&&o&&(u=0),x.push("visibility",0,P.visibility),hn(this,P,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==f&&"transform"!==f&&~(f=Fr[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in Er)if(this.styles.save(f),g||((v=t._gsap).renderTransform&&!e.parseTransform||Sn(t,e.parseTransform),y=!1!==e.smoothOrigin&&v.smooth,(g=this._pt=new ur(this._pt,P,Gr,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===f)this._pt=new ur(this._pt,v,"scaleY",v.scaleY,(d?dt(v.scaleY,d+o):o)-v.scaleY||0,Ir),this._pt.u=0,O.push("scaleY",f),f+="X";else{if("transformOrigin"===f){x.push(Qr,0,P[Qr]),T=void 0,M=void 0,k=void 0,M=(T=(w=a).split(" "))[0],k=T[1]||"50%","top"!==M&&"bottom"!==M&&"left"!==k&&"right"!==k||(w=M,M=k,k=w),T[0]=vn[M]||M,T[1]=vn[k]||k,a=T.join(" "),v.svg?On(t,a,0,y,0,this):((p=parseFloat(a.split(" ")[2])||0)!==v.zOrigin&&hn(this,v,"zOrigin",v.zOrigin,p),hn(this,P,f,Pn(s),Pn(a)));continue}if("svgOrigin"===f){On(t,a,1,y,0,this);continue}if(f in wn){Fn(this,v,f,u,d?dt(u,d+a):a);continue}if("smoothOrigin"===f){hn(this,v,"smooth",v.smooth,a);continue}if("force3D"===f){v[f]=a;continue}if("transform"===f){Bn(this,a,t);continue}}else f in P||(f=sn(f)||f);if(_||(o||0===o)&&(u||0===u)&&!Lr.test(a)&&f in P)o||(o=0),(h=(s+"").substr((u+"").length))!==(p=Qt(a)||(f in m.units?m.units[f]:h))&&(u=_n(t,f,s,p)),this._pt=new ur(this._pt,_?v:P,f,u,(d?dt(u,d+o):o)-u,_||"px"!==p&&"zIndex"!==f||!1===e.autoRound?Ir:Xr),this._pt.u=p||0,h!==p&&"%"!==p&&(this._pt.b=s,this._pt.r=Yr);else if(f in P)mn.call(this,t,f,s,d?d+a:a);else if(f in t)this.add(t,f,s||t[f],d?d+a:a,n,i);else if("parseTransform"!==f){j(f,a);continue}_||(f in P?x.push(f,0,P[f]):x.push(f,1,s||t[f])),O.push(f)}b&&or(this)},render:function(t,e){if(e.tween._time||!Sr())for(var r=e._pt;r;)r.r(t,r.d),r=r._next;else e.styles.revert()},get:gn,aliases:Fr,getSetter:function(t,e,r){var n=Fr[e];return n&&n.indexOf(",")<0&&(e=n),e in Er&&e!==Qr&&(t._gsap.x||gn(t,"x"))?r&&Or===r?"scale"===e?Vr:Wr:(Or=r||{})&&("scale"===e?jr:$r):t.style&&!C(t.style[e])?Ur:~e.indexOf("-")?Hr:Je(t,e)},core:{_removeProperty:fn,_getMatrix:kn}};br.utils.checkPrefix=sn,br.core.getStyleSaver=tn,Xn=ft("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Yn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Er[t]=1})),ft(Yn,(function(t){m.units[t]="deg",wn[t]=1})),Fr[Xn[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Yn,ft("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Fr[e[1]]=Xn[e[0]]})),ft("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){m.units[t]="px"})),br.registerPlugin(Nn);var qn=br.registerPlugin(Nn)||br;qn.core.Tween;const Un=function(){const t=document.querySelector("#content");t.innerHTML="",t.setAttribute("class","");const e=document.createElement("div");e.classList.add("mainLoad");const r=document.createElement("h2");r.textContent="Sapore Italiano";const n=document.createElement("p");n.textContent="Welcome to Sapore Italiano, where the warm ambiance of an authentic Italian trattoria meets the flavors of a traditional Italian kitchen. Our menu features classic dishes made with the freshest and most authentic ingredients, from handmade pasta to wood-fired pizzas and the finest wines from all regions of Italy.",e.appendChild(r),e.appendChild(n),t.appendChild(e),qn.from(".mainLoad",{duration:1,opacity:0,y:50}),console.log("module work!")};function Hn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Wn,Vn,jn,$n,Gn,Qn,Zn,Kn,Jn,ti,ei,ri,ni,ii=function(){return Wn||"undefined"!=typeof window&&(Wn=window.gsap)&&Wn.registerPlugin&&Wn},si=1,ai=[],oi=[],ui=[],li=Date.now,ci=function(t,e){return e},fi=function(t,e){return~ui.indexOf(t)&&ui[ui.indexOf(t)+1][e]},hi=function(t){return!!~ti.indexOf(t)},pi=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},di=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},_i="scrollLeft",gi="scrollTop",mi=function(){return ei&&ei.isPressed||oi.cache++},vi=function(t,e){var r=function r(n){if(n||0===n){si&&(jn.history.scrollRestoration="manual");var i=ei&&ei.isPressed;n=r.v=Math.round(n)||(ei&&ei.iOS?1:0),t(n),r.cacheID=oi.cache,i&&ci("ss",n)}else(e||oi.cache!==r.cacheID||ci("ref"))&&(r.cacheID=oi.cache,r.v=t());return r.v+r.offset};return r.offset=0,t&&r},yi={s:_i,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:vi((function(t){return arguments.length?jn.scrollTo(t,bi.sc()):jn.pageXOffset||$n[_i]||Gn[_i]||Qn[_i]||0}))},bi={s:gi,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:yi,sc:vi((function(t){return arguments.length?jn.scrollTo(yi.sc(),t):jn.pageYOffset||$n[gi]||Gn[gi]||Qn[gi]||0}))},xi=function(t){return Wn.utils.toArray(t)[0]||("string"==typeof t&&!1!==Wn.config().nullTargetWarn?console.warn("Element not found:",t):null)},wi=function(t,e){var r=e.s,n=e.sc;hi(t)&&(t=$n.scrollingElement||Gn);var i=oi.indexOf(t),s=n===bi.sc?1:2;!~i&&(i=oi.push(t)-1),oi[i+s]||t.addEventListener("scroll",mi);var a=oi[i+s],o=a||(oi[i+s]=vi(fi(t,r),!0)||(hi(t)?n:vi((function(e){return arguments.length?t[r]=e:t[r]}))));return o.target=t,a||(o.smooth="smooth"===Wn.getProperty(t,"scrollBehavior")),o},Ti=function(t,e,r){var n=t,i=t,s=li(),a=s,o=e||50,u=Math.max(500,3*o),l=function(t,e){var u=li();e||u-s>o?(i=n,n=t,a=s,s=u):r?n+=t:n=i+(t-i)/(u-a)*(s-a)};return{update:l,reset:function(){i=n=r?0:n,a=s=0},getVelocity:function(t){var e=a,o=i,c=li();return(t||0===t)&&t!==n&&l(t),s===a||c-a>u?0:(n+(r?o:-o))/((r?c:s)-e)*1e3}}},Mi=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},ki=function(t){var e=Math.max.apply(Math,t),r=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(r)?e:r},Oi=function(){var t,e,r,n;(Jn=Wn.core.globals().ScrollTrigger)&&Jn.core&&(t=Jn.core,e=t.bridge||{},r=t._scrollers,n=t._proxies,r.push.apply(r,oi),n.push.apply(n,ui),oi=r,ui=n,ci=function(t,r){return e[t](r)})},Si=function(t){return(Wn=t||ii())&&"undefined"!=typeof document&&document.body&&(jn=window,$n=document,Gn=$n.documentElement,Qn=$n.body,ti=[jn,$n,Gn,Qn],Wn.utils.clamp,ni=Wn.core.context||function(){},Kn="onpointerenter"in Qn?"pointer":"mouse",Zn=Pi.isTouch=jn.matchMedia&&jn.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in jn||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,ri=Pi.eventTypes=("ontouchstart"in Gn?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in Gn?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return si=0}),500),Oi(),Vn=1),Vn};yi.op=bi,oi.cache=0;var Pi=function(){function t(t){this.init(t)}var e,r;return t.prototype.init=function(t){Vn||Si(Wn)||console.warn("Please gsap.registerPlugin(Observer)"),Jn||Oi();var e=t.tolerance,r=t.dragMinimum,n=t.type,i=t.target,s=t.lineHeight,a=t.debounce,o=t.preventDefault,u=t.onStop,l=t.onStopDelay,c=t.ignore,f=t.wheelSpeed,h=t.event,p=t.onDragStart,d=t.onDragEnd,_=t.onDrag,g=t.onPress,m=t.onRelease,v=t.onRight,y=t.onLeft,b=t.onUp,x=t.onDown,w=t.onChangeX,T=t.onChangeY,M=t.onChange,k=t.onToggleX,O=t.onToggleY,S=t.onHover,P=t.onHoverEnd,E=t.onMove,C=t.ignoreCheck,A=t.isNormalizer,z=t.onGestureStart,D=t.onGestureEnd,R=t.onWheel,L=t.onEnable,F=t.onDisable,I=t.onClick,B=t.scrollSpeed,Y=t.capture,X=t.allowClicks,N=t.lockAxis,q=t.onLockAxis;this.target=i=xi(i)||Gn,this.vars=t,c&&(c=Wn.utils.toArray(c)),e=e||1e-9,r=r||0,f=f||1,B=B||1,n=n||"wheel,touch,pointer",a=!1!==a,s||(s=parseFloat(jn.getComputedStyle(Qn).lineHeight)||22);var U,H,W,V,j,$,G,Q=this,Z=0,K=0,J=wi(i,yi),tt=wi(i,bi),et=J(),rt=tt(),nt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===ri[0],it=hi(i),st=i.ownerDocument||$n,at=[0,0,0],ot=[0,0,0],ut=0,lt=function(){return ut=li()},ct=function(t,e){return(Q.event=t)&&c&&~c.indexOf(t.target)||e&&nt&&"touch"!==t.pointerType||C&&C(t,e)},ft=function(){var t=Q.deltaX=ki(at),r=Q.deltaY=ki(ot),n=Math.abs(t)>=e,i=Math.abs(r)>=e;M&&(n||i)&&M(Q,t,r,at,ot),n&&(v&&Q.deltaX>0&&v(Q),y&&Q.deltaX<0&&y(Q),w&&w(Q),k&&Q.deltaX<0!=Z<0&&k(Q),Z=Q.deltaX,at[0]=at[1]=at[2]=0),i&&(x&&Q.deltaY>0&&x(Q),b&&Q.deltaY<0&&b(Q),T&&T(Q),O&&Q.deltaY<0!=K<0&&O(Q),K=Q.deltaY,ot[0]=ot[1]=ot[2]=0),(V||W)&&(E&&E(Q),W&&(_(Q),W=!1),V=!1),$&&!($=!1)&&q&&q(Q),j&&(R(Q),j=!1),U=0},ht=function(t,e,r){at[r]+=t,ot[r]+=e,Q._vx.update(t),Q._vy.update(e),a?U||(U=requestAnimationFrame(ft)):ft()},pt=function(t,e){N&&!G&&(Q.axis=G=Math.abs(t)>Math.abs(e)?"x":"y",$=!0),"y"!==G&&(at[2]+=t,Q._vx.update(t,!0)),"x"!==G&&(ot[2]+=e,Q._vy.update(e,!0)),a?U||(U=requestAnimationFrame(ft)):ft()},dt=function(t){if(!ct(t,1)){var e=(t=Mi(t,o)).clientX,n=t.clientY,i=e-Q.x,s=n-Q.y,a=Q.isDragging;Q.x=e,Q.y=n,(a||Math.abs(Q.startX-e)>=r||Math.abs(Q.startY-n)>=r)&&(_&&(W=!0),a||(Q.isDragging=!0),pt(i,s),a||p&&p(Q))}},_t=Q.onPress=function(t){ct(t,1)||(Q.axis=G=null,H.pause(),Q.isPressed=!0,t=Mi(t),Z=K=0,Q.startX=Q.x=t.clientX,Q.startY=Q.y=t.clientY,Q._vx.reset(),Q._vy.reset(),pi(A?i:st,ri[1],dt,o,!0),Q.deltaX=Q.deltaY=0,g&&g(Q))},gt=function(t){if(!ct(t,1)){di(A?i:st,ri[1],dt,!0);var e=!isNaN(Q.y-Q.startY),r=Q.isDragging&&(Math.abs(Q.x-Q.startX)>3||Math.abs(Q.y-Q.startY)>3),n=Mi(t);!r&&e&&(Q._vx.reset(),Q._vy.reset(),o&&X&&Wn.delayedCall(.08,(function(){if(li()-ut>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(st.createEvent){var e=st.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,jn,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),Q.isDragging=Q.isGesturing=Q.isPressed=!1,u&&!A&&H.restart(!0),d&&r&&d(Q),m&&m(Q,r)}},mt=function(t){return t.touches&&t.touches.length>1&&(Q.isGesturing=!0)&&z(t,Q.isDragging)},vt=function(){return(Q.isGesturing=!1)||D(Q)},yt=function(t){if(!ct(t)){var e=J(),r=tt();ht((e-et)*B,(r-rt)*B,1),et=e,rt=r,u&&H.restart(!0)}},bt=function(t){if(!ct(t)){t=Mi(t,o),R&&(j=!0);var e=(1===t.deltaMode?s:2===t.deltaMode?jn.innerHeight:1)*f;ht(t.deltaX*e,t.deltaY*e,0),u&&!A&&H.restart(!0)}},xt=function(t){if(!ct(t)){var e=t.clientX,r=t.clientY,n=e-Q.x,i=r-Q.y;Q.x=e,Q.y=r,V=!0,(n||i)&&pt(n,i)}},wt=function(t){Q.event=t,S(Q)},Tt=function(t){Q.event=t,P(Q)},Mt=function(t){return ct(t)||Mi(t,o)&&I(Q)};H=Q._dc=Wn.delayedCall(l||.25,(function(){Q._vx.reset(),Q._vy.reset(),H.pause(),u&&u(Q)})).pause(),Q.deltaX=Q.deltaY=0,Q._vx=Ti(0,50,!0),Q._vy=Ti(0,50,!0),Q.scrollX=J,Q.scrollY=tt,Q.isDragging=Q.isGesturing=Q.isPressed=!1,ni(this),Q.enable=function(t){return Q.isEnabled||(pi(it?st:i,"scroll",mi),n.indexOf("scroll")>=0&&pi(it?st:i,"scroll",yt,o,Y),n.indexOf("wheel")>=0&&pi(i,"wheel",bt,o,Y),(n.indexOf("touch")>=0&&Zn||n.indexOf("pointer")>=0)&&(pi(i,ri[0],_t,o,Y),pi(st,ri[2],gt),pi(st,ri[3],gt),X&&pi(i,"click",lt,!1,!0),I&&pi(i,"click",Mt),z&&pi(st,"gesturestart",mt),D&&pi(st,"gestureend",vt),S&&pi(i,Kn+"enter",wt),P&&pi(i,Kn+"leave",Tt),E&&pi(i,Kn+"move",xt)),Q.isEnabled=!0,t&&t.type&&_t(t),L&&L(Q)),Q},Q.disable=function(){Q.isEnabled&&(ai.filter((function(t){return t!==Q&&hi(t.target)})).length||di(it?st:i,"scroll",mi),Q.isPressed&&(Q._vx.reset(),Q._vy.reset(),di(A?i:st,ri[1],dt,!0)),di(it?st:i,"scroll",yt,Y),di(i,"wheel",bt,Y),di(i,ri[0],_t,Y),di(st,ri[2],gt),di(st,ri[3],gt),di(i,"click",lt,!0),di(i,"click",Mt),di(st,"gesturestart",mt),di(st,"gestureend",vt),di(i,Kn+"enter",wt),di(i,Kn+"leave",Tt),di(i,Kn+"move",xt),Q.isEnabled=Q.isPressed=Q.isDragging=!1,F&&F(Q))},Q.kill=Q.revert=function(){Q.disable();var t=ai.indexOf(Q);t>=0&&ai.splice(t,1),ei===Q&&(ei=0)},ai.push(Q),A&&hi(i)&&(ei=Q),Q.enable(h)},e=t,(r=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Hn(e.prototype,r),t}();Pi.version="3.11.4",Pi.create=function(t){return new Pi(t)},Pi.register=Si,Pi.getAll=function(){return ai.slice()},Pi.getById=function(t){return ai.filter((function(e){return e.vars.id===t}))[0]},ii()&&Wn.registerPlugin(Pi);var Ei,Ci,Ai,zi,Di,Ri,Li,Fi,Ii,Bi,Yi,Xi,Ni,qi,Ui,Hi,Wi,Vi,ji,$i,Gi,Qi,Zi,Ki,Ji,ts,es,rs,ns,is,ss,as,os,us,ls=1,cs=Date.now,fs=cs(),hs=0,ps=0,ds=function(){return qi=1},_s=function(){return qi=0},gs=function(t){return t},ms=function(t){return Math.round(1e5*t)/1e5||0},vs=function(){return"undefined"!=typeof window},ys=function(){return Ei||vs()&&(Ei=window.gsap)&&Ei.registerPlugin&&Ei},bs=function(t){return!!~Li.indexOf(t)},xs=function(t){return fi(t,"getBoundingClientRect")||(bs(t)?function(){return za.width=Ai.innerWidth,za.height=Ai.innerHeight,za}:function(){return js(t)})},ws=function(t,e){var r=e.s,n=e.d2,i=e.d,s=e.a;return(r="scroll"+n)&&(s=fi(t,r))?s()-xs(t)()[i]:bs(t)?(Di[r]||Ri[r])-(Ai["inner"+n]||Di["client"+n]||Ri["client"+n]):t[r]-t["offset"+n]},Ts=function(t,e){for(var r=0;r<ji.length;r+=3)(!e||~e.indexOf(ji[r+1]))&&t(ji[r],ji[r+1],ji[r+2])},Ms=function(t){return"string"==typeof t},ks=function(t){return"function"==typeof t},Os=function(t){return"number"==typeof t},Ss=function(t){return"object"==typeof t},Ps=function(t,e,r){return t&&t.progress(e?0:1)&&r&&t.pause()},Es=function(t,e){if(t.enabled){var r=e(t);r&&r.totalTime&&(t.callbackAnimation=r)}},Cs=Math.abs,As="left",zs="right",Ds="bottom",Rs="width",Ls="height",Fs="Right",Is="Left",Bs="Top",Ys="Bottom",Xs="padding",Ns="margin",qs="Width",Us="Height",Hs="px",Ws=function(t){return Ai.getComputedStyle(t)},Vs=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},js=function(t,e){var r=e&&"matrix(1, 0, 0, 1, 0, 0)"!==Ws(t)[Ui]&&Ei.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return r&&r.progress(0).kill(),n},$s=function(t,e){var r=e.d2;return t["offset"+r]||t["client"+r]||0},Gs=function(t){var e,r=[],n=t.labels,i=t.duration();for(e in n)r.push(n[e]/i);return r},Qs=function(t){var e=Ei.utils.snap(t),r=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return r?function(t,n,i){var s;if(void 0===i&&(i=.001),!n)return e(t);if(n>0){for(t-=i,s=0;s<r.length;s++)if(r[s]>=t)return r[s];return r[s-1]}for(s=r.length,t+=i;s--;)if(r[s]<=t)return r[s];return r[0]}:function(r,n,i){void 0===i&&(i=.001);var s=e(r);return!n||Math.abs(s-r)<i||s-r<0==n<0?s:e(n<0?r-t:r+t)}},Zs=function(t,e,r,n){return r.split(",").forEach((function(r){return t(e,r,n)}))},Ks=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},Js=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},ta=function(t,e,r){return r&&r.wheelHandler&&t(e,"wheel",r)},ea={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},ra={toggleActions:"play",anticipatePin:0},na={top:0,left:0,center:.5,bottom:1,right:1},ia=function(t,e){if(Ms(t)){var r=t.indexOf("="),n=~r?+(t.charAt(r-1)+1)*parseFloat(t.substr(r+1)):0;~r&&(t.indexOf("%")>r&&(n*=e/100),t=t.substr(0,r-1)),t=n+(t in na?na[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},sa=function(t,e,r,n,i,s,a,o){var u=i.startColor,l=i.endColor,c=i.fontSize,f=i.indent,h=i.fontWeight,p=zi.createElement("div"),d=bs(r)||"fixed"===fi(r,"pinType"),_=-1!==t.indexOf("scroller"),g=d?Ri:r,m=-1!==t.indexOf("start"),v=m?u:l,y="border-color:"+v+";font-size:"+c+";color:"+v+";font-weight:"+h+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return y+="position:"+((_||o)&&d?"fixed;":"absolute;"),(_||o||!d)&&(y+=(n===bi?zs:Ds)+":"+(s+parseFloat(f))+"px;"),a&&(y+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),p._isStart=m,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=y,p.innerText=e||0===e?t+"-"+e:t,g.children[0]?g.insertBefore(p,g.children[0]):g.appendChild(p),p._offset=p["offset"+n.op.d2],aa(p,0,n,m),p},aa=function(t,e,r,n){var i={display:"block"},s=r[n?"os2":"p2"],a=r[n?"p2":"os2"];t._isFlipped=n,i[r.a+"Percent"]=n?-100:0,i[r.a]=n?"1px":0,i["border"+s+qs]=1,i["border"+a+qs]=0,i[r.p]=e+"px",Ei.set(t,i)},oa=[],ua={},la=function(){return cs()-hs>34&&(ss||(ss=requestAnimationFrame(ka)))},ca=function(){(!Zi||!Zi.isPressed||Zi.startX>Ri.clientWidth)&&(oi.cache++,Zi?ss||(ss=requestAnimationFrame(ka)):ka(),hs||ga("scrollStart"),hs=cs())},fa=function(){ts=Ai.innerWidth,Ji=Ai.innerHeight},ha=function(){oi.cache++,!Ni&&!Qi&&!zi.fullscreenElement&&!zi.webkitFullscreenElement&&(!Ki||ts!==Ai.innerWidth||Math.abs(Ai.innerHeight-Ji)>.25*Ai.innerHeight)&&Fi.restart(!0)},pa={},da=[],_a=function t(){return Js(Ia,"scrollEnd",t)||wa(!0)},ga=function(t){return pa[t]&&pa[t].map((function(t){return t()}))||da},ma=[],va=function(t){for(var e=0;e<ma.length;e+=5)(!t||ma[e+4]&&ma[e+4].query===t)&&(ma[e].style.cssText=ma[e+1],ma[e].getBBox&&ma[e].setAttribute("transform",ma[e+2]||""),ma[e+3].uncache=1)},ya=function(t,e){var r;for(Hi=0;Hi<oa.length;Hi++)!(r=oa[Hi])||e&&r._ctx!==e||(t?r.kill(1):r.revert(!0,!0));e&&va(e),e||ga("revert")},ba=function(t,e){oi.cache++,(e||!as)&&oi.forEach((function(t){return ks(t)&&t.cacheID++&&(t.rec=0)})),Ms(t)&&(Ai.history.scrollRestoration=ns=t)},xa=0,wa=function(t,e){if(!hs||t){as=Ia.isRefreshing=!0,oi.forEach((function(t){return ks(t)&&t.cacheID++&&(t.rec=t())}));var r=ga("refreshInit");$i&&Ia.sort(),e||ya(),oi.forEach((function(t){ks(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),oa.slice(0).forEach((function(t){return t.refresh()})),oa.forEach((function(t,e){if(t._subPinOffset&&t.pin){var r=t.vars.horizontal?"offsetWidth":"offsetHeight",n=t.pin[r];t.revert(!0,1),t.adjustPinSpacing(t.pin[r]-n),t.revert(!1,1)}})),oa.forEach((function(t){return"max"===t.vars.end&&t.setPositions(t.start,Math.max(t.start+1,ws(t.scroller,t._dir)))})),r.forEach((function(t){return t&&t.render&&t.render(-1)})),oi.forEach((function(t){ks(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),ba(ns,1),Fi.pause(),xa++,ka(2),oa.forEach((function(t){return ks(t.vars.onRefresh)&&t.vars.onRefresh(t)})),as=Ia.isRefreshing=!1,ga("refresh")}else Ks(Ia,"scrollEnd",_a)},Ta=0,Ma=1,ka=function(t){if(!as||2===t){Ia.isUpdating=!0,us&&us.update(0);var e=oa.length,r=cs(),n=r-fs>=50,i=e&&oa[0].scroll();if(Ma=Ta>i?-1:1,Ta=i,n&&(hs&&!qi&&r-hs>200&&(hs=0,ga("scrollEnd")),Yi=fs,fs=r),Ma<0){for(Hi=e;Hi-- >0;)oa[Hi]&&oa[Hi].update(0,n);Ma=1}else for(Hi=0;Hi<e;Hi++)oa[Hi]&&oa[Hi].update(0,n);Ia.isUpdating=!1}ss=0},Oa=[As,"top",Ds,zs,Ns+Ys,Ns+Fs,Ns+Bs,Ns+Is,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Sa=Oa.concat([Rs,Ls,"boxSizing","max"+qs,"max"+Us,"position",Ns,Xs,Xs+Bs,Xs+Fs,Xs+Ys,Xs+Is]),Pa=function(t,e,r,n){if(!t._gsap.swappedIn){for(var i,s=Oa.length,a=e.style,o=t.style;s--;)a[i=Oa[s]]=r[i];a.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(a.display="inline-block"),o[Ds]=o[zs]="auto",a.flexBasis=r.flexBasis||"auto",a.overflow="visible",a.boxSizing="border-box",a[Rs]=$s(t,yi)+Hs,a[Ls]=$s(t,bi)+Hs,a[Xs]=o[Ns]=o.top=o[As]="0",Ca(n),o[Rs]=o["max"+qs]=r[Rs],o[Ls]=o["max"+Us]=r[Ls],o[Xs]=r[Xs],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Ea=/([A-Z])/g,Ca=function(t){if(t){var e,r,n=t.t.style,i=t.length,s=0;for((t.t._gsap||Ei.core.getCache(t.t)).uncache=1;s<i;s+=2)r=t[s+1],e=t[s],r?n[e]=r:n[e]&&n.removeProperty(e.replace(Ea,"-$1").toLowerCase())}},Aa=function(t){for(var e=Sa.length,r=t.style,n=[],i=0;i<e;i++)n.push(Sa[i],r[Sa[i]]);return n.t=t,n},za={left:0,top:0},Da=function(t,e,r,n,i,s,a,o,u,l,c,f,h){ks(t)&&(t=t(o)),Ms(t)&&"max"===t.substr(0,3)&&(t=f+("="===t.charAt(4)?ia("0"+t.substr(3),r):0));var p,d,_,g=h?h.time():0;if(h&&h.seek(0),Os(t))a&&aa(a,r,n,!0);else{ks(e)&&(e=e(o));var m,v,y,b,x=(t||"0").split(" ");_=xi(e)||Ri,(m=js(_)||{})&&(m.left||m.top)||"none"!==Ws(_).display||(b=_.style.display,_.style.display="block",m=js(_),b?_.style.display=b:_.style.removeProperty("display")),v=ia(x[0],m[n.d]),y=ia(x[1]||"0",r),t=m[n.p]-u[n.p]-l+v+i-y,a&&aa(a,y,n,r-y<20||a._isStart&&y>20),r-=r-y}if(s){var w=t+r,T=s._isStart;p="scroll"+n.d2,aa(s,w,n,T&&w>20||!T&&(c?Math.max(Ri[p],Di[p]):s.parentNode[p])<=w+1),c&&(u=js(a),c&&(s.style[n.op.p]=u[n.op.p]-n.op.m-s._offset+Hs))}return h&&_&&(p=js(_),h.seek(f),d=js(_),h._caScrollDist=p[n.p]-d[n.p],t=t/h._caScrollDist*f),h&&h.seek(g),h?t:Math.round(t)},Ra=/(webkit|moz|length|cssText|inset)/i,La=function(t,e,r,n){if(t.parentNode!==e){var i,s,a=t.style;if(e===Ri){for(i in t._stOrig=a.cssText,s=Ws(t))+i||Ra.test(i)||!s[i]||"string"!=typeof a[i]||"0"===i||(a[i]=s[i]);a.top=r,a.left=n}else a.cssText=t._stOrig;Ei.core.getCache(t).uncache=1,e.appendChild(t)}},Fa=function(t,e){var r,n,i=wi(t,e),s="_scroll"+e.p2,a=function e(a,o,u,l,c){var f=e.tween,h=o.onComplete,p={};return u=u||i(),c=l&&c||0,l=l||a-u,f&&f.kill(),r=Math.round(u),o[s]=a,o.modifiers=p,p[s]=function(t){return(t=Math.round(i()))!==r&&t!==n&&Math.abs(t-r)>3&&Math.abs(t-n)>3?(f.kill(),e.tween=0):t=u+l*f.ratio+c*f.ratio*f.ratio,n=r,r=Math.round(t)},o.onUpdate=function(){oi.cache++,ka()},o.onComplete=function(){e.tween=0,h&&h.call(f)},f=e.tween=Ei.to(t,o)};return t[s]=i,i.wheelHandler=function(){return a.tween&&a.tween.kill()&&(a.tween=0)},Ks(t,"wheel",i.wheelHandler),a},Ia=function(){function t(e,r){Ci||t.register(Ei)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(e,r)}return t.prototype.init=function(e,r){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),ps){var n,i,s,a,o,u,l,c,f,h,p,d,_,g,m,v,y,b,x,w,T,M,k,O,S,P,E,C,A,z,D,R,L,F,I,B,Y,X,N,q,U,H,W=e=Vs(Ms(e)||Os(e)||e.nodeType?{trigger:e}:e,ra),V=W.onUpdate,j=W.toggleClass,$=W.id,G=W.onToggle,Q=W.onRefresh,Z=W.scrub,K=W.trigger,J=W.pin,tt=W.pinSpacing,et=W.invalidateOnRefresh,rt=W.anticipatePin,nt=W.onScrubComplete,it=W.onSnapComplete,st=W.once,at=W.snap,ot=W.pinReparent,ut=W.pinSpacer,lt=W.containerAnimation,ct=W.fastScrollEnd,ft=W.preventOverlaps,ht=e.horizontal||e.containerAnimation&&!1!==e.horizontal?yi:bi,pt=!Z&&0!==Z,dt=xi(e.scroller||Ai),_t=Ei.core.getCache(dt),gt=bs(dt),mt="fixed"===("pinType"in e?e.pinType:fi(dt,"pinType")||gt&&"fixed"),vt=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],yt=pt&&e.toggleActions.split(" "),bt="markers"in e?e.markers:ra.markers,xt=gt?0:parseFloat(Ws(dt)["border"+ht.p2+qs])||0,wt=this,Tt=e.onRefreshInit&&function(){return e.onRefreshInit(wt)},Mt=function(t,e,r){var n=r.d,i=r.d2,s=r.a;return(s=fi(t,"getBoundingClientRect"))?function(){return s()[n]}:function(){return(e?Ai["inner"+i]:t["client"+i])||0}}(dt,gt,ht),kt=function(t,e){return!e||~ui.indexOf(t)?xs(t):function(){return za}}(dt,gt),Ot=0,St=0,Pt=wi(dt,ht);if(rs(wt),wt._dir=ht,rt*=45,wt.scroller=dt,wt.scroll=lt?lt.time.bind(lt):Pt,a=Pt(),wt.vars=e,r=r||e.animation,"refreshPriority"in e&&($i=1,-9999===e.refreshPriority&&(us=wt)),_t.tweenScroll=_t.tweenScroll||{top:Fa(dt,bi),left:Fa(dt,yi)},wt.tweenTo=n=_t.tweenScroll[ht.p],wt.scrubDuration=function(t){(R=Os(t)&&t)?D?D.duration(t):D=Ei.to(r,{ease:"expo",totalProgress:"+=0.001",duration:R,paused:!0,onComplete:function(){return nt&&nt(wt)}}):(D&&D.progress(1).kill(),D=0)},r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==e.immediateRender&&r.duration()&&r.render(0,!0,!0),wt.animation=r.pause(),r.scrollTrigger=wt,wt.scrubDuration(Z),A=0,$||($=r.vars.id)),oa.push(wt),at&&(Ss(at)&&!at.push||(at={snapTo:at}),"scrollBehavior"in Ri.style&&Ei.set(gt?[Ri,Di]:dt,{scrollBehavior:"auto"}),oi.forEach((function(t){return ks(t)&&t.target===(gt?zi.scrollingElement||Di:dt)&&(t.smooth=!1)})),s=ks(at.snapTo)?at.snapTo:"labels"===at.snapTo?function(t){return function(e){return Ei.utils.snap(Gs(t),e)}}(r):"labelsDirectional"===at.snapTo?(q=r,function(t,e){return Qs(Gs(q))(t,e.direction)}):!1!==at.directional?function(t,e){return Qs(at.snapTo)(t,cs()-St<500?0:e.direction)}:Ei.utils.snap(at.snapTo),L=at.duration||{min:.1,max:2},L=Ss(L)?Bi(L.min,L.max):Bi(L,L),F=Ei.delayedCall(at.delay||R/2||.1,(function(){var t=Pt(),e=cs()-St<500,i=n.tween;if(!(e||Math.abs(wt.getVelocity())<10)||i||qi||Ot===t)wt.isActive&&Ot!==t&&F.restart(!0);else{var a=(t-u)/_,o=r&&!pt?r.totalProgress():a,c=e?0:(o-z)/(cs()-Yi)*1e3||0,f=Ei.utils.clamp(-a,1-a,Cs(c/2)*c/.185),h=a+(!1===at.inertia?0:f),p=Bi(0,1,s(h,wt)),d=Math.round(u+p*_),g=at,m=g.onStart,v=g.onInterrupt,y=g.onComplete;if(t<=l&&t>=u&&d!==t){if(i&&!i._initted&&i.data<=Cs(d-t))return;!1===at.inertia&&(f=p-a),n(d,{duration:L(Cs(.185*Math.max(Cs(h-o),Cs(p-o))/c/.05||0)),ease:at.ease||"power3",data:Cs(d-t),onInterrupt:function(){return F.restart(!0)&&v&&v(wt)},onComplete:function(){wt.update(),Ot=Pt(),A=z=r&&!pt?r.totalProgress():wt.progress,it&&it(wt),y&&y(wt)}},t,f*_,d-t-f*_),m&&m(wt,n.tween)}}})).pause()),$&&(ua[$]=wt),(N=(K=wt.trigger=xi(K||J))&&K._gsap&&K._gsap.stRevert)&&(N=N(wt)),J=!0===J?K:xi(J),Ms(j)&&(j={targets:K,className:j}),J&&(!1===tt||tt===Ns||(tt=!(!tt&&J.parentNode&&J.parentNode.style&&"flex"===Ws(J.parentNode).display)&&Xs),wt.pin=J,(i=Ei.core.getCache(J)).spacer?g=i.pinState:(ut&&((ut=xi(ut))&&!ut.nodeType&&(ut=ut.current||ut.nativeElement),i.spacerIsNative=!!ut,ut&&(i.spacerState=Aa(ut))),i.spacer=y=ut||zi.createElement("div"),y.classList.add("pin-spacer"),$&&y.classList.add("pin-spacer-"+$),i.pinState=g=Aa(J)),!1!==e.force3D&&Ei.set(J,{force3D:!0}),wt.spacer=y=i.spacer,C=Ws(J),k=C[tt+ht.os2],x=Ei.getProperty(J),w=Ei.quickSetter(J,ht.a,Hs),Pa(J,y,C),v=Aa(J)),bt){d=Ss(bt)?Vs(bt,ea):ea,h=sa("scroller-start",$,dt,ht,d,0),p=sa("scroller-end",$,dt,ht,d,0,h),b=h["offset"+ht.op.d2];var Et=xi(fi(dt,"content")||dt);c=this.markerStart=sa("start",$,Et,ht,d,b,0,lt),f=this.markerEnd=sa("end",$,Et,ht,d,b,0,lt),lt&&(X=Ei.quickSetter([c,f],ht.a,Hs)),mt||ui.length&&!0===fi(dt,"fixedMarkers")||(H=Ws(U=gt?Ri:dt).position,U.style.position="absolute"===H||"fixed"===H?H:"relative",Ei.set([h,p],{force3D:!0}),S=Ei.quickSetter(h,ht.a,Hs),E=Ei.quickSetter(p,ht.a,Hs))}if(lt){var Ct=lt.vars.onUpdate,At=lt.vars.onUpdateParams;lt.eventCallback("onUpdate",(function(){wt.update(0,0,1),Ct&&Ct.apply(At||[])}))}wt.previous=function(){return oa[oa.indexOf(wt)-1]},wt.next=function(){return oa[oa.indexOf(wt)+1]},wt.revert=function(t,e){if(!e)return wt.kill(!0);var n=!1!==t||!wt.enabled,i=Ni;n!==wt.isReverted&&(n&&(B=Math.max(Pt(),wt.scroll.rec||0),I=wt.progress,Y=r&&r.progress()),c&&[c,f,h,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(Ni=1,wt.update(n)),!J||ot&&wt.isActive||(n?function(t,e,r){Ca(r);var n=t._gsap;if(n.spacerIsNative)Ca(n.spacerState);else if(t._gsap.swappedIn){var i=e.parentNode;i&&(i.insertBefore(t,e),i.removeChild(e))}t._gsap.swappedIn=!1}(J,y,g):Pa(J,y,Ws(J),O)),n||wt.update(n),Ni=i,wt.isReverted=n)},wt.refresh=function(i,s){if(!Ni&&wt.enabled||s)if(J&&i&&hs)Ks(t,"scrollEnd",_a);else{!as&&Tt&&Tt(wt),Ni=1,St=cs(),n.tween&&(n.tween.kill(),n.tween=0),D&&D.pause(),et&&r&&r.revert({kill:!1}).invalidate(),wt.isReverted||wt.revert(!0,!0),wt._subPinOffset=!1;for(var d,b,w,k,S,E,C,A,z,R,L,X=Mt(),N=kt(),q=lt?lt.duration():ws(dt,ht),U=0,H=0,W=e.end,V=e.endTrigger||K,j=e.start||(0!==e.start&&K?J?"0 0":"0 100%":0),$=wt.pinnedContainer=e.pinnedContainer&&xi(e.pinnedContainer),G=K&&Math.max(0,oa.indexOf(wt))||0,Z=G;Z--;)(E=oa[Z]).end||E.refresh(0,1)||(Ni=1),!(C=E.pin)||C!==K&&C!==J||E.isReverted||(R||(R=[]),R.unshift(E),E.revert(!0,!0)),E!==oa[Z]&&(G--,Z--);for(ks(j)&&(j=j(wt)),u=Da(j,K,X,ht,Pt(),c,h,wt,N,xt,mt,q,lt)||(J?-.001:0),ks(W)&&(W=W(wt)),Ms(W)&&!W.indexOf("+=")&&(~W.indexOf(" ")?W=(Ms(j)?j.split(" ")[0]:"")+W:(U=ia(W.substr(2),X),W=Ms(j)?j:u+U,V=K)),l=Math.max(u,Da(W||(V?"100% 0":q),V,X,ht,Pt()+U,f,p,wt,N,xt,mt,q,lt))||-.001,_=l-u||(u-=.01)&&.001,U=0,Z=G;Z--;)(C=(E=oa[Z]).pin)&&E.start-E._pinPush<=u&&!lt&&E.end>0&&(d=E.end-E.start,(C===K&&E.start-E._pinPush<u||C===$)&&!Os(j)&&(U+=d*(1-E.progress)),C===J&&(H+=d));if(u+=U,l+=U,wt._pinPush=H,c&&U&&((d={})[ht.a]="+="+U,$&&(d[ht.p]="-="+Pt()),Ei.set([c,f],d)),J)d=Ws(J),k=ht===bi,w=Pt(),T=parseFloat(x(ht.a))+H,!q&&l>1&&((L={style:L=(gt?zi.scrollingElement||Di:dt).style,value:L["overflow"+ht.a.toUpperCase()]})["overflow"+ht.a.toUpperCase()]="scroll"),Pa(J,y,d),v=Aa(J),b=js(J,!0),A=mt&&wi(dt,k?yi:bi)(),tt&&((O=[tt+ht.os2,_+H+Hs]).t=y,(Z=tt===Xs?$s(J,ht)+_+H:0)&&O.push(ht.d,Z+Hs),Ca(O),$&&oa.forEach((function(t){t.pin===$&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),mt&&Pt(B)),mt&&((S={top:b.top+(k?w-u:A)+Hs,left:b.left+(k?A:w-u)+Hs,boxSizing:"border-box",position:"fixed"})[Rs]=S["max"+qs]=Math.ceil(b.width)+Hs,S[Ls]=S["max"+Us]=Math.ceil(b.height)+Hs,S[Ns]=S[Ns+Bs]=S[Ns+Fs]=S[Ns+Ys]=S[Ns+Is]="0",S[Xs]=d[Xs],S[Xs+Bs]=d[Xs+Bs],S[Xs+Fs]=d[Xs+Fs],S[Xs+Ys]=d[Xs+Ys],S[Xs+Is]=d[Xs+Is],m=function(t,e,r){for(var n,i=[],s=t.length,a=r?8:0;a<s;a+=2)n=t[a],i.push(n,n in e?e[n]:t[a+1]);return i.t=t.t,i}(g,S,ot),as&&Pt(0)),r?(z=r._initted,Gi(1),r.render(r.duration(),!0,!0),M=x(ht.a)-T+_+H,P=Math.abs(_-M)>1,mt&&P&&m.splice(m.length-2,2),r.render(0,!0,!0),z||r.invalidate(!0),r.parent||r.totalTime(r.totalTime()),Gi(0)):M=_,L&&(L.value?L.style["overflow"+ht.a.toUpperCase()]=L.value:L.style.removeProperty("overflow-"+ht.a));else if(K&&Pt()&&!lt)for(b=K.parentNode;b&&b!==Ri;)b._pinOffset&&(u-=b._pinOffset,l-=b._pinOffset),b=b.parentNode;R&&R.forEach((function(t){return t.revert(!1,!0)})),wt.start=u,wt.end=l,a=o=as?B:Pt(),lt||as||(a<B&&Pt(B),wt.scroll.rec=0),wt.revert(!1,!0),F&&(Ot=-1,wt.isActive&&Pt(u+_*I),F.restart(!0)),Ni=0,r&&pt&&(r._initted||Y)&&r.progress()!==Y&&r.progress(Y,!0).render(r.time(),!0,!0),(I!==wt.progress||lt)&&(r&&!pt&&r.totalProgress(I,!0),wt.progress=(a-u)/_===I?0:I),J&&tt&&(y._pinOffset=Math.round(wt.progress*M)),Q&&!as&&Q(wt)}},wt.getVelocity=function(){return(Pt()-o)/(cs()-Yi)*1e3||0},wt.endAnimation=function(){Ps(wt.callbackAnimation),r&&(D?D.progress(1):r.paused()?pt||Ps(r,wt.direction<0,1):Ps(r,r.reversed()))},wt.labelToScroll=function(t){return r&&r.labels&&(u||wt.refresh()||u)+r.labels[t]/r.duration()*_||0},wt.getTrailing=function(t){var e=oa.indexOf(wt),r=wt.direction>0?oa.slice(0,e).reverse():oa.slice(e+1);return(Ms(t)?r.filter((function(e){return e.vars.preventOverlaps===t})):r).filter((function(t){return wt.direction>0?t.end<=u:t.start>=l}))},wt.update=function(t,e,i){if(!lt||i||t){var s,c,f,p,d,g,b,x=as?B:wt.scroll(),O=t?0:(x-u)/_,C=O<0?0:O>1?1:O||0,R=wt.progress;if(e&&(o=a,a=lt?Pt():x,at&&(z=A,A=r&&!pt?r.totalProgress():C)),rt&&!C&&J&&!Ni&&!ls&&hs&&u<x+(x-o)/(cs()-Yi)*rt&&(C=1e-4),C!==R&&wt.enabled){if(p=(d=(s=wt.isActive=!!C&&C<1)!=(!!R&&R<1))||!!C!=!!R,wt.direction=C>R?1:-1,wt.progress=C,p&&!Ni&&(c=C&&!R?0:1===C?1:1===R?2:3,pt&&(f=!d&&"none"!==yt[c+1]&&yt[c+1]||yt[c],b=r&&("complete"===f||"reset"===f||f in r))),ft&&(d||b)&&(b||Z||!r)&&(ks(ft)?ft(wt):wt.getTrailing(ft).forEach((function(t){return t.endAnimation()}))),pt||(!D||Ni||ls?r&&r.totalProgress(C,!!Ni):(D._dp._time-D._start!==D._time&&D.render(D._dp._time-D._start),D.resetTo?D.resetTo("totalProgress",C,r._tTime/r._tDur):(D.vars.totalProgress=C,D.invalidate().restart()))),J)if(t&&tt&&(y.style[tt+ht.os2]=k),mt){if(p){if(g=!t&&C>R&&l+1>x&&x+1>=ws(dt,ht),ot)if(t||!s&&!g)La(J,y);else{var L=js(J,!0),I=x-u;La(J,Ri,L.top+(ht===bi?I:0)+Hs,L.left+(ht===bi?0:I)+Hs)}Ca(s||g?m:v),P&&C<1&&s||w(T+(1!==C||g?0:M))}}else w(ms(T+M*C));at&&!n.tween&&!Ni&&!ls&&F.restart(!0),j&&(d||st&&C&&(C<1||!is))&&Ii(j.targets).forEach((function(t){return t.classList[s||st?"add":"remove"](j.className)})),V&&!pt&&!t&&V(wt),p&&!Ni?(pt&&(b&&("complete"===f?r.pause().totalProgress(1):"reset"===f?r.restart(!0).pause():"restart"===f?r.restart(!0):r[f]()),V&&V(wt)),!d&&is||(G&&d&&Es(wt,G),vt[c]&&Es(wt,vt[c]),st&&(1===C?wt.kill(!1,1):vt[c]=0),d||vt[c=1===C?1:3]&&Es(wt,vt[c])),ct&&!s&&Math.abs(wt.getVelocity())>(Os(ct)?ct:2500)&&(Ps(wt.callbackAnimation),D?D.progress(1):Ps(r,"reverse"===f?1:!C,1))):pt&&V&&!Ni&&V(wt)}if(E){var Y=lt?x/lt.duration()*(lt._caScrollDist||0):x;S(Y+(h._isFlipped?1:0)),E(Y)}X&&X(-x/lt.duration()*(lt._caScrollDist||0))}},wt.enable=function(e,r){wt.enabled||(wt.enabled=!0,Ks(dt,"resize",ha),Ks(gt?zi:dt,"scroll",ca),Tt&&Ks(t,"refreshInit",Tt),!1!==e&&(wt.progress=I=0,a=o=Ot=Pt()),!1!==r&&wt.refresh())},wt.getTween=function(t){return t&&n?n.tween:D},wt.setPositions=function(t,e){J&&(T+=t-u,M+=e-t-_,tt===Xs&&wt.adjustPinSpacing(e-t-_)),wt.start=u=t,wt.end=l=e,_=e-t,wt.update()},wt.adjustPinSpacing=function(t){if(O){var e=O.indexOf(ht.d)+1;O[e]=parseFloat(O[e])+t+Hs,O[1]=parseFloat(O[1])+t+Hs,Ca(O)}},wt.disable=function(e,r){if(wt.enabled&&(!1!==e&&wt.revert(!0,!0),wt.enabled=wt.isActive=!1,r||D&&D.pause(),B=0,i&&(i.uncache=1),Tt&&Js(t,"refreshInit",Tt),F&&(F.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!gt)){for(var s=oa.length;s--;)if(oa[s].scroller===dt&&oa[s]!==wt)return;Js(dt,"resize",ha),Js(dt,"scroll",ca)}},wt.kill=function(t,n){wt.disable(t,n),D&&!n&&D.kill(),$&&delete ua[$];var s=oa.indexOf(wt);s>=0&&oa.splice(s,1),s===Hi&&Ma>0&&Hi--,s=0,oa.forEach((function(t){return t.scroller===wt.scroller&&(s=1)})),s||as||(wt.scroll.rec=0),r&&(r.scrollTrigger=null,t&&r.revert({kill:!1}),n||r.kill()),c&&[c,f,h,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),us===wt&&(us=0),J&&(i&&(i.uncache=1),s=0,oa.forEach((function(t){return t.pin===J&&s++})),s||(i.spacer=0)),e.onKill&&e.onKill(wt)},wt.enable(!1,!1),N&&N(wt),r&&r.add&&!_?Ei.delayedCall(.01,(function(){return u||l||wt.refresh()}))&&(_=.01)&&(u=l=0):wt.refresh(),J&&function(){if(os!==xa){var t=os=xa;requestAnimationFrame((function(){return t===xa&&wa(!0)}))}}()}else this.update=this.refresh=this.kill=gs},t.register=function(e){return Ci||(Ei=e||ys(),vs()&&window.document&&t.enable(),Ci=ps),Ci},t.defaults=function(t){if(t)for(var e in t)ra[e]=t[e];return ra},t.disable=function(t,e){ps=0,oa.forEach((function(r){return r[e?"kill":"disable"](t)})),Js(Ai,"wheel",ca),Js(zi,"scroll",ca),clearInterval(Xi),Js(zi,"touchcancel",gs),Js(Ri,"touchstart",gs),Zs(Js,zi,"pointerdown,touchstart,mousedown",ds),Zs(Js,zi,"pointerup,touchend,mouseup",_s),Fi.kill(),Ts(Js);for(var r=0;r<oi.length;r+=3)ta(Js,oi[r],oi[r+1]),ta(Js,oi[r],oi[r+2])},t.enable=function(){if(Ai=window,zi=document,Di=zi.documentElement,Ri=zi.body,Ei&&(Ii=Ei.utils.toArray,Bi=Ei.utils.clamp,rs=Ei.core.context||gs,Gi=Ei.core.suppressOverwrites||gs,ns=Ai.history.scrollRestoration||"auto",Ei.core.globals("ScrollTrigger",t),Ri)){ps=1,Pi.register(Ei),t.isTouch=Pi.isTouch,es=Pi.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),Ks(Ai,"wheel",ca),Li=[Ai,zi,Di,Ri],Ei.matchMedia?(t.matchMedia=function(t){var e,r=Ei.matchMedia();for(e in t)r.add(e,t[e]);return r},Ei.addEventListener("matchMediaInit",(function(){return ya()})),Ei.addEventListener("matchMediaRevert",(function(){return va()})),Ei.addEventListener("matchMedia",(function(){wa(0,1),ga("matchMedia")})),Ei.matchMedia("(orientation: portrait)",(function(){return fa(),fa}))):console.warn("Requires GSAP 3.11.0 or later"),fa(),Ks(zi,"scroll",ca);var e,r,n=Ri.style,i=n.borderTopStyle,s=Ei.core.Animation.prototype;for(s.revert||Object.defineProperty(s,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=js(Ri),bi.m=Math.round(e.top+bi.sc())||0,yi.m=Math.round(e.left+yi.sc())||0,i?n.borderTopStyle=i:n.removeProperty("border-top-style"),Xi=setInterval(la,250),Ei.delayedCall(.5,(function(){return ls=0})),Ks(zi,"touchcancel",gs),Ks(Ri,"touchstart",gs),Zs(Ks,zi,"pointerdown,touchstart,mousedown",ds),Zs(Ks,zi,"pointerup,touchend,mouseup",_s),Ui=Ei.utils.checkPrefix("transform"),Sa.push(Ui),Ci=cs(),Fi=Ei.delayedCall(.2,wa).pause(),ji=[zi,"visibilitychange",function(){var t=Ai.innerWidth,e=Ai.innerHeight;zi.hidden?(Wi=t,Vi=e):Wi===t&&Vi===e||ha()},zi,"DOMContentLoaded",wa,Ai,"load",wa,Ai,"resize",ha],Ts(Ks),oa.forEach((function(t){return t.enable(0,1)})),r=0;r<oi.length;r+=3)ta(Js,oi[r],oi[r+1]),ta(Js,oi[r],oi[r+2])}},t.config=function(e){"limitCallbacks"in e&&(is=!!e.limitCallbacks);var r=e.syncInterval;r&&clearInterval(Xi)||(Xi=r)&&setInterval(la,r),"ignoreMobileResize"in e&&(Ki=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Ts(Js)||Ts(Ks,e.autoRefreshEvents||"none"),Qi=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var r=xi(t),n=oi.indexOf(r),i=bs(r);~n&&oi.splice(n,i?6:2),e&&(i?ui.unshift(Ai,e,Ri,e,Di,e):ui.unshift(r,e))},t.clearMatchMedia=function(t){oa.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,r){var n=(Ms(t)?xi(t):t).getBoundingClientRect(),i=n[r?Rs:Ls]*e||0;return r?n.right-i>0&&n.left+i<Ai.innerWidth:n.bottom-i>0&&n.top+i<Ai.innerHeight},t.positionInViewport=function(t,e,r){Ms(t)&&(t=xi(t));var n=t.getBoundingClientRect(),i=n[r?Rs:Ls],s=null==e?i/2:e in na?na[e]*i:~e.indexOf("%")?parseFloat(e)*i/100:parseFloat(e)||0;return r?(n.left+s)/Ai.innerWidth:(n.top+s)/Ai.innerHeight},t.killAll=function(t){if(oa.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=pa.killAll||[];pa={},e.forEach((function(t){return t()}))}},t}();Ia.version="3.11.4",Ia.saveStyles=function(t){return t?Ii(t).forEach((function(t){if(t&&t.style){var e=ma.indexOf(t);e>=0&&ma.splice(e,5),ma.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),Ei.core.getCache(t),rs())}})):ma},Ia.revert=function(t,e){return ya(!t,e)},Ia.create=function(t,e){return new Ia(t,e)},Ia.refresh=function(t){return t?ha():(Ci||Ia.register())&&wa(!0)},Ia.update=function(t){return++oi.cache&&ka(!0===t?2:0)},Ia.clearScrollMemory=ba,Ia.maxScroll=function(t,e){return ws(t,e?yi:bi)},Ia.getScrollFunc=function(t,e){return wi(xi(t),e?yi:bi)},Ia.getById=function(t){return ua[t]},Ia.getAll=function(){return oa.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},Ia.isScrolling=function(){return!!hs},Ia.snapDirectional=Qs,Ia.addEventListener=function(t,e){var r=pa[t]||(pa[t]=[]);~r.indexOf(e)||r.push(e)},Ia.removeEventListener=function(t,e){var r=pa[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},Ia.batch=function(t,e){var r,n=[],i={},s=e.interval||.016,a=e.batchMax||1e9,o=function(t,e){var r=[],n=[],i=Ei.delayedCall(s,(function(){e(r,n),r=[],n=[]})).pause();return function(t){r.length||i.restart(!0),r.push(t.trigger),n.push(t),a<=r.length&&i.progress(1)}};for(r in e)i[r]="on"===r.substr(0,2)&&ks(e[r])&&"onRefreshInit"!==r?o(0,e[r]):e[r];return ks(a)&&(a=a(),Ks(Ia,"refresh",(function(){return a=e.batchMax()}))),Ii(t).forEach((function(t){var e={};for(r in i)e[r]=i[r];e.trigger=t,n.push(Ia.create(e))})),n};var Ba,Ya=function(t,e,r,n){return e>n?t(n):e<0&&t(0),r>n?(n-e)/(r-e):r<0?e/(e-r):1},Xa=function t(e,r){!0===r?e.style.removeProperty("touch-action"):e.style.touchAction=!0===r?"auto":r?"pan-"+r+(Pi.isTouch?" pinch-zoom":""):"none",e===Di&&t(Ri,r)},Na={auto:1,scroll:1},qa=function(t){var e,r=t.event,n=t.target,i=t.axis,s=(r.changedTouches?r.changedTouches[0]:r).target,a=s._gsap||Ei.core.getCache(s),o=cs();if(!a._isScrollT||o-a._isScrollT>2e3){for(;s&&s!==Ri&&(s.scrollHeight<=s.clientHeight&&s.scrollWidth<=s.clientWidth||!Na[(e=Ws(s)).overflowY]&&!Na[e.overflowX]);)s=s.parentNode;a._isScroll=s&&s!==n&&!bs(s)&&(Na[(e=Ws(s)).overflowY]||Na[e.overflowX]),a._isScrollT=o}(a._isScroll||"x"===i)&&(r.stopPropagation(),r._gsapAllow=!0)},Ua=function(t,e,r,n){return Pi.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&qa,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return r&&Ks(zi,Pi.eventTypes[0],Wa,!1,!0)},onDisable:function(){return Js(zi,Pi.eventTypes[0],Wa,!0)}})},Ha=/(input|label|select|textarea)/i,Wa=function(t){var e=Ha.test(t.target.tagName);(e||Ba)&&(t._gsapAllow=!0,Ba=e)};Ia.sort=function(t){return oa.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},Ia.observe=function(t){return new Pi(t)},Ia.normalizeScroll=function(t){if(void 0===t)return Zi;if(!0===t&&Zi)return Zi.enable();if(!1===t)return Zi&&Zi.kill();var e=t instanceof Pi?t:function(t){Ss(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,r,n,i,s,a,o,u,l=t,c=l.normalizeScrollX,f=l.momentum,h=l.allowNestedScroll,p=xi(t.target)||Di,d=Ei.core.globals().ScrollSmoother,_=d&&d.get(),g=es&&(t.content&&xi(t.content)||_&&!1!==t.content&&!_.smooth()&&_.content()),m=wi(p,bi),v=wi(p,yi),y=1,b=(Pi.isTouch&&Ai.visualViewport?Ai.visualViewport.scale*Ai.visualViewport.width:Ai.outerWidth)/Ai.innerWidth,x=0,w=ks(f)?function(){return f(e)}:function(){return f||2.8},T=Ua(p,t.type,!0,h),M=function(){return i=!1},k=gs,O=gs,S=function(){r=ws(p,bi),O=Bi(es?1:0,r),c&&(k=Bi(0,ws(p,yi))),n=xa},P=function(){g._gsap.y=ms(parseFloat(g._gsap.y)+m.offset)+"px",g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(g._gsap.y)+", 0, 1)",m.offset=m.cacheID=0},E=function(){S(),s.isActive()&&s.vars.scrollY>r&&(m()>r?s.progress(1)&&m(r):s.resetTo("scrollY",r))};return g&&Ei.set(g,{y:"+=0"}),t.ignoreCheck=function(t){return es&&"touchmove"===t.type&&function(){if(i){requestAnimationFrame(M);var t=ms(e.deltaY/2),r=O(m.v-t);if(g&&r!==m.v+m.offset){m.offset=r-m.v;var n=ms((parseFloat(g&&g._gsap.y)||0)-m.offset);g.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",g._gsap.y=n+"px",m.cacheID=oi.cache,ka()}return!0}m.offset&&P(),i=!0}()||y>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){var t=y;y=ms((Ai.visualViewport&&Ai.visualViewport.scale||1)/b),s.pause(),t!==y&&Xa(p,y>1.01||!c&&"x"),a=v(),o=m(),S(),n=xa},t.onRelease=t.onGestureStart=function(t,e){if(m.offset&&P(),e){oi.cache++;var n,i,a=w();c&&(i=(n=v())+.05*a*-t.velocityX/.227,a*=Ya(v,n,i,ws(p,yi)),s.vars.scrollX=k(i)),i=(n=m())+.05*a*-t.velocityY/.227,a*=Ya(m,n,i,ws(p,bi)),s.vars.scrollY=O(i),s.invalidate().duration(a).play(.01),(es&&s.vars.scrollY>=r||n>=r-1)&&Ei.to({},{onUpdate:E,duration:a})}else u.restart(!0)},t.onWheel=function(){s._ts&&s.pause(),cs()-x>1e3&&(n=0,x=cs())},t.onChange=function(t,e,r,i,s){if(xa!==n&&S(),e&&c&&v(k(i[2]===e?a+(t.startX-t.x):v()+e-i[1])),r){m.offset&&P();var u=s[2]===r,l=u?o+t.startY-t.y:m()+r-s[1],f=O(l);u&&l!==f&&(o+=f-l),m(f)}(r||e)&&ka()},t.onEnable=function(){Xa(p,!c&&"x"),Ia.addEventListener("refresh",E),Ks(Ai,"resize",E),m.smooth&&(m.target.style.scrollBehavior="auto",m.smooth=v.smooth=!1),T.enable()},t.onDisable=function(){Xa(p,!0),Js(Ai,"resize",E),Ia.removeEventListener("refresh",E),T.kill()},t.lockAxis=!1!==t.lockAxis,(e=new Pi(t)).iOS=es,es&&!m()&&m(1),es&&Ei.ticker.add(gs),u=e._dc,s=Ei.to(e,{ease:"power4",paused:!0,scrollX:c?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:u.vars.onComplete}),e}(t);return Zi&&Zi.target===e.target&&Zi.kill(),bs(e.target)&&(Zi=e),e},Ia.core={_getVelocityProp:Ti,_inputObserver:Ua,_scrollers:oi,_proxies:ui,bridge:{ss:function(){hs||ga("scrollStart"),hs=cs()},ref:function(){return Ni}}},ys()&&Ei.registerPlugin(Ia),qn.registerPlugin(Ia);window.addEventListener("DOMContentLoaded",(()=>{Un()})),function(){const t=document.querySelector("#homeBtn"),e=document.querySelector("#menuBtn"),r=document.querySelector("#contactBtn");document.querySelector(".menuLoad"),t.addEventListener("click",(()=>{Un()})),e.addEventListener("click",(()=>{!function(){const t=document.querySelector("#content");t.innerHTML="",t.setAttribute("class",""),t.classList.add("menu");const e=document.createElement("div");e.classList.add("menuLoad"),e.innerHTML='<div class="dish">\n    <img src="./images/pizza/margarita.png" alt="Pizza image">\n    <div class="right">\n        <h4>Margherita Pizza</h4>\n        <p class="desc">Tomato sauce, mozzarella, basil, and olive oil</p>\n        <div class="sizes">\n            <span>\n                <p>12"</p>\n                <p>10$</p>\n            </span>\n            <span>\n                <p>14"</p>\n                <p>13$</p>\n            </span>\n            <span>\n                <p>16"</p>\n                <p>14$</p>\n            </span>\n        </div>\n    </div>\n</div>\n\n<div class="dish">\n    <img src="./images/pizza/pepperoni.png" alt="Pizza image">\n    <div class="right">\n        <h4>Pepperoni Pizza</h4>\n        <p class="desc">Tomato sauce, mozzarella, pepperoni, and oregano</p>\n        <div class="sizes">\n            <span>\n                <p>12"</p>\n                <p>12$</p>\n            </span>\n            <span>\n                <p>14"</p>\n                <p>15$</p>\n            </span>\n            <span>\n                <p>16"</p>\n                <p>18$</p>\n            </span>\n        </div>\n    </div>\n</div>\n\n<div class="dish">\n    <img src="./images/pizza/hawaii.png" alt="Pizza image">\n    <div class="right">\n        <h4>Hawaiian Pizza</h4>\n        <p class="desc">Tomato sauce, mozzarella, pineapple, bacon and ham</p>\n        <div class="sizes">\n            <span>\n                <p>12"</p>\n                <p>11$</p>\n            </span>\n            <span>\n                <p>14"</p>\n                <p>14$</p>\n            </span>\n            <span>\n                <p>16"</p>\n                <p>16$</p>\n            </span>\n        </div>\n    </div>\n</div>\n\n<div class="dish">\n    <img src="./images/pizza/hot_pepperoni.png" alt="Pizza image">\n    <div class="right">\n        <h4>Hot Pepperoni Pizza</h4>\n        <p class="desc">Tomato sauce, mozzarella, pepperoni, and oregano, chilli pepper</p>\n        <div class="sizes">\n            <span>\n                <p>12"</p>\n                <p>14$</p>\n            </span>\n            <span>\n                <p>14"</p>\n                <p>17$</p>\n            </span>\n            <span>\n                <p>16"</p>\n                <p>20$</p>\n            </span>\n        </div>\n    </div>\n</div>\n<div class="attribute"><a href="https://www.freepik.com/free-vector/set-cartoon-pizzas-with-different-stuffing-flat-illustration_14625624.htm#query=pizza%20margherita&position=1&from_view=search&track=sph">Image by pch.vector</a> on Freepik</div>',t.appendChild(e),qn.from(".menuLoad",{delay:.5,duration:.5,opacity:0})}(),setTimeout((()=>{qn.utils.toArray(".dish").forEach((t=>{qn.from(t,{duration:.5,opacity:0,x:-20,scrollTrigger:{scroller:".menuLoad",trigger:t,toggleActions:"play reverse restart reverse",start:"top center",end:"bottom"}})}))}),500)})),r.addEventListener("click",(()=>{!function(){const t=document.querySelector("#content");t.innerHTML="",t.setAttribute("class","");const e=document.createElement("div");e.classList.add("contactLoad");const r=document.createElement("h2");r.textContent="Contact us:";const n=document.createElement("p");n.innerHTML='Phone: <a href="tel:123456789">+48 12345678</a><br>\n    Mail: <a href="mailto:sopel.sob19@wp.pl">sopel.sob19@wp.pl</a><br><br>\n    <b>Monday</b>: 11:00 AM - 9:00 PM<br>\n    <b>Tuesday</b>: 11:00 AM - 9:00 PM<br>\n    <b>Wednesday</b>: 11:00 AM - 9:00 PM<br>\n    <b>Thursday</b>: 11:00 AM - 9:00 PM<br>\n    <b>Friday</b>: 11:00 AM - 10:00 PM<br>\n    <b>Saturday</b>: 11:00 AM - 10:00 PM<br>\n    <b>Sunday</b>: 11:00 AM - 9:00 PM',e.appendChild(r),e.appendChild(n),t.appendChild(e),qn.from(".contactLoad",{duration:1,opacity:0,y:50}),console.log("module work!")}()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,